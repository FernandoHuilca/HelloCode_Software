'*********************************'
@startuml Hello_Code
'Modulo Gamificacion'
package Modulo_Usuario {

    class Usuario {
            - nombre : String
            - email : String
            - usuario : String
            - exp : Integer
            + Usuario(nombre: String, email: String, usuario: String, exp: Integer)
            + getExp() : Integer
        }

}

package "Gamificacion_Modulo" {

    class Logro {
        - nombre : String
        - descripcion : String
        - puntajeUmbral : Integer
        - fechaObtencion : Date
        - logrosDisponibles: List<Logro>
        - logrosDesbloqueados: List<Logro>
        + Logro(nombre: String, descripcion: String, criterios: String, umbral: Integer)
        + verificarComplecion(progreso: ProgresoEstudiante) : Boolean
        'Hablar de agregarLogro
        +agregarLogro(logro: Logro))
    }

    abstract class Desafio {
        - puntosRecompensa : Integer
        - fechaInicio : LocalDateTime
        - fechaFin : LocalDateTime
        - estaActivo : Boolean
        - logrosDisponibles : List<Logro>
        - leccionesCompletadas : Integer
        - meta : Integer
        'Cual es la diferencia entre verificarComplecion y estaCompletado?
        + Desafio(logros: List<Logro>)
        + activar() : void
        + desactivar() : void
        + verificarComplecion(estudiante: ProgresoEstudiante) : Boolean
        + desbloquearLogro(logro: Logro, estudiante: ProgresoEstudiante) : Boolean
        + completarDesafio(estudiante: ProgresoEstudiante) : void
        + estaCompletado() : Boolean
        + simularDesafio()
    }

    class DesafioSemanal {

        + DesafioSemanal(metaSemanal: Integer, logros: List<Logro>)
        + estaCompletado() : Boolean
        + actualizarAvanze(cantidad: Integer) : void
    }

    class DesafioMensual {

        + DesafioMensual(objetivoMensual: Integer, logros: List<Logro>)
        + estaCompletado() : Boolean
        + actualizarActividades(cantidad: Integer) : void
    }

    class ProgresoEstudiante {
        - usuario : Usuario
        - logrosDesbloqueados : List<Logro>
        - puntosTotal : Integer
        - desafiosCompletados : Integer
        - desafiosActivos : Lista<Desafio>

        + ProgresoEstudiante(usuario: Usuario)
        + agregarLogro(logro: Logro) : void
        + actualizarProgreso(desafio: Desafio) : void
        + actualizarLogro(logro: Logro) : void
        + actualizarDesafio(desafio: Desafio) : void
        + actualizarPuntos(puntos: Integer) : void
    }

    class Ranking {
        - rankingGeneral : List<ProgresoEstudiante>
        -INSTANCE
        - Ranking()
        + getInstance() : Ranking
        + actualizarRanking(estudiante: ProgresoEstudiante) : void
        + obtenerRankingGeneral() : List<ProgresoEstudiante>
        + calcularPosicion(estudiante: ProgresoEstudiante) : Integer
    }
    Ranking ->Ranking: getInstance()
    ' Relaciones de Herencia
    Desafio <|-- DesafioSemanal
    Desafio <|-- DesafioMensual

    ' Relaciones de ComposiciÃ³n
    ProgresoEstudiante *-- Usuario : "contiene"


    ' Relaciones de Dependencia
    Logro <.. ProgresoEstudiante : "cumpleCriterios()"
    Desafio <. ProgresoEstudiante : "completarDesafio()"
    Ranking <-- ProgresoEstudiante : "actualizarRanking()"

}

'Modulo Comunidad'
!define ENTITY_COLOR #E1F5FE
!define ENUM_COLOR #FFF3E0
!define CONTROLLER_COLOR #F3E5F5
!define INTERFACE_COLOR #FFFDE7

package "Comunidad_Modulo" {

    package "modelo" <<ENTITY_COLOR>> {

        class Comunidad {
            - String idComunidad
            - String nombre
            - String descripcion
            - ForoGeneral foroGeneral
            - List<ChatPrivado> chatsPrivados
            - List<UsuarioComunidad> usuariosMiembros
            - List<UsuarioComunidad> usuariosConectados
            - LocalDateTime fechaCreacion
            - Moderador moderador
            --
            + agregarChatPrivado(ChatPrivado): void
            + agregarUsuarioMiembro(UsuarioComunidad): void
            + unirUsuario(UsuarioComunidad): void
            + removerUsuario(UsuarioComunidad): void
            + conectarUsuario(UsuarioComunidad): void
            + obtenerEstadisticas(): String
        }

        class ForoGeneral {
            - String idForo
            - List<GrupoDiscusion> gruposDiscusion
            - List<GrupoCompartir> gruposCompartir
            --
            + crearGrupoDiscusion(String, NivelJava, TipoTema): GrupoDiscusion
            + crearGrupoCompartir(String, NivelJava, TipoTema): GrupoCompartir
        }

        class GrupoDiscusion {
            - String idGrupo
            - String titulo
            - NivelJava nivelJava
            - TipoTema tipoTema
            - List<UsuarioComunidad> miembros
            - List<HiloDiscusion> hilos
            --
            + addHilo: void
            + unirseGrupo(UsuarioComunidad): void
            + esApropiado(UsuarioComunidad): boolean
        }

        class GrupoCompartir {
            - String idGrupo
            - String titulo
            - NivelJava nivelJava
            - TipoTema tipoTema
            - List<UsuarioComunidad> miembros
            - List<Solucion> soluciones
            --
            + compartirSolucion(Solucion): void
            + unirseGrupo(UsuarioComunidad): void
            + salirGrupo(UsuarioComunidad): void
            + esApropiado(UsuarioComunidad): boolean
        }

        class HiloDiscusion {
            - String idHilo
            - String titulo
            - String problema
            - UsuarioComunidad autor
            - EstadoHilo estado
            - Map<String, Integer> votosUsuarios
            - LocalDateTime fechaCreacion
            - List<Respuesta> respuestas
            --
            + responder(String, UsuarioComunidad, Moderador): boolean
            + responder(String, UsuarioComunidad): void @Deprecated
            + votar(UsuarioComunidad, int): void
            + marcarResuelto(): void
            + cerrar(): void
            + reabrir(): void
        }

        class Respuesta {
            - String idRespuesta
            - String contenido
            - UsuarioComunidad autor
            - LocalDateTime fechaPublicacion
            - Map<String, Integer> votosUsuarios
            - Boolean esSolucion
            --
            + votar(UsuarioComunidad, int): void
            + marcarComoSolucion(): void
            + desmarcarComoSolucion(): void
        }

        class ChatPrivado {
            - String idChat
            - List<UsuarioComunidad> participantes
            - List<Mensaje> mensajes
            - LocalDateTime fechaCreacion
            --
            + enviarMensaje(String, UsuarioComunidad, Moderador): boolean
            + enviarMensaje(String, UsuarioComunidad): void @Deprecated
            + obtenerHistorial(): List<Mensaje>
        }

        class Mensaje {
            - String idMensaje
            - String contenido
            - UsuarioComunidad emisor
            - LocalDateTime fechaEnvio
            - boolean leido
            --
            + marcarComoLeido(): void
        }

        class Solucion {
            - String idSolucion
            - String titulo
            - String contenido
            - UsuarioComunidad autor
            - TipoSolucion tipoSolucion
            - String archivo
            - LocalDateTime fechaPublicacion
            - Map<String, Integer> votosUsuarios
            - List<Comentario> comentarios
            --
            + votar(UsuarioComunidad, int): void
            + comentar(String, UsuarioComunidad): void
            + eliminarComentario(String): void
        }

        class Comentario {
            - String idComentario
            - String contenido
            - UsuarioComunidad autor
            - LocalDateTime fechaPublicacion
            - Map<String, Integer> votosUsuarios
            --
            + votar(UsuarioComunidad, int): void
        }

        class Moderador {
            - String idModerador
            - String nombre
            - String username
            - List<Comunidad> comunidadesGestionadas
            - ModeracionService moderacionService
            --
            + asignarComunidad(Comunidad): void
            + moderarMensaje(String, UsuarioComunidad): ResultadoModeracion
            + usuarioEstaSancionado(UsuarioComunidad usuario)
        }

        class SancionUsuario {
            - String idSancion
            - UsuarioComunidad usuario
            - String razon
            - LocalDateTime fechaInicio
            - LocalDateTime fechaFin
            - boolean activa
            --
            + estaActiva(): boolean
            + levantarSancion(): void
        }
    }

    package "enums" <<ENUM_COLOR>> {
        enum TipoTema {
            SINTAXIS
            POO
            ESTRUCTURAS_DATOS
            ALGORITMOS
            EXCEPCIONES
            FRAMEWORKS
        }

        enum EstadoHilo {
            ABIERTO
            CERRADO
            RESUELTO
        }

        enum TipoSolucion {
            CODIGO
            IMAGEN
            TEXTO
        }

        enum TipoInfraccion {
            LENGUAJE_OFENSIVO
            SPAM
            CAPS_LOCK
            REPETICION
            FUERA_TEMA
            NINGUNA
        }

    }

    package "controladores" <<CONTROLLER_COLOR>> {
        class ContextoSistema {
            - static ContextoSistema instancia
            - List<UsuarioComunidad> usuarios
            - List<Comunidad> comunidades
            - List<Moderador> moderadores
            - Comunidad comunidadActual
            - Map<String, Integer> participacionesUsuario
            - Map<String, Integer> puntosUsuario
            - PersistenciaService persistenciaService
            --
            + getInstance(): ContextoSistema {static}
            + agregarComunidad(Comunidad): void
            + eliminarComunidad(Comunidad): void
            + actualizarComunidad(Comunidad): void
            + limpiar(): void
            + tieneComunidadActiva(): boolean
            + establecerComunidadActivaParaUsuario(): void
            + cargarDatosDesdePersistencia(): void
            + conectarUsuarioAComunidad(UsuarioComunidad, Comunidad): void
            + desconectarUsuarioDeComunidad(UsuarioComunidad, Comunidad): void
            + guardarGrupoForo(Comunidad, String creador): void
            + guardarChatPrivado(Comunidad, ChatPrivado): void
        }
    }

}


' Relaciones principales del modelo - Simplificadas
Comunidad *-- ForoGeneral : "contiene"
Comunidad --> ChatPrivado : "gestiona"

Comunidad --> Moderador : "tiene moderador"

ForoGeneral --> GrupoDiscusion : "contiene grupos"
ForoGeneral --> GrupoCompartir : "contiene grupos"

GrupoDiscusion *-- HiloDiscusion : "contiene hilos"
GrupoCompartir --> Solucion : "contiene"

HiloDiscusion *-- Respuesta : "tiene respuestas"


ChatPrivado *-- Mensaje : "contiene mensajes"


Solucion --> Comentario : "tiene comentarios"



Moderador --> SancionUsuario : "aplica sanciones"


' Relaciones con enums - Simplificadas
GrupoDiscusion --> TipoTema

GrupoCompartir --> TipoTema

HiloDiscusion --> EstadoHilo
Solucion --> TipoSolucion

' Relaciones de controladores - Simplificadas

ContextoSistema --> Comunidad : "gestiona comunidades"
ContextoSistema --> Moderador : "gestiona moderadores"
ContextoSistema --> ContextoSistema : "instancia {static}"


'Modulo Ejercicios'
package "EjerciciosIteractivos_Modulo.Logic" {
    ' Interfaces
    interface EvaluadorRespuestas {
        + evaluarRespuestas(ArrayList<Respuesta>): ResultadoDeEvaluacion
    }

    interface Respuesta {
        + getRespuesta(): Object
    }

    ' Enums
    enum NivelDificultad {
        PRINCIPIANTE
        BASICO
        INTERMEDIO
        AVANZADO
        EXPERTO
        --
        + getDescripcion(): String
    }

    enum Lenguaje {
        JAVA
        PYTHON
        C
        PHP
    }

    ' Clases de EvaluaciÃ³n
    class ResultadoDeEvaluacion {
        - porcentajeDeAcerto: double
        --
        + ResultadoDeEvaluacion(porcentajeDeAcerto: double)
        + getPorcentajeDeAcerto(): double
    }

    class RespuestaString {
        - respuesta: String
        --
        + RespuestaString(respuesta: String)
        + getRespuesta(): Object
    }

    ' Clases de Ejercicios
    abstract class EjercicioBase {
        # instruccion: String
        # respuestasCorrectas: ArrayList<String>
        # nivelDificultad: NivelDificultad
        # lenguaje: Lenguaje
        --
        + EjercicioBase(instruccion, respuestasCorrectas, nivelDificultad, lenguaje)
        + getInstruccion(): String
        + getNivel(): NivelDificultad
        + getLenguaje(): Lenguaje
        + {abstract} evaluarRespuestas(ArrayList<Respuesta>): ResultadoDeEvaluacion
    }

    class EjercicioSeleccion {
        - opcionesDeSeleccion: ArrayList<String>
        --
        + getListOpciones(): ArrayList<String>
        + getOpcion(numOpcion: int): String
        + obtenerRespuestasCorrectas(): ArrayList<String>
        + evaluarRespuestas(ArrayList<Respuesta>): ResultadoDeEvaluacion
    }

    class EjercicioSeleccionBuilder {
        - instruccion: String
        - opcionesDeSeleccion: ArrayList<String>
        - respuestasCorrectas: ArrayList<String>
        - nivelDificultad: NivelDificultad
        - lenguaje: Lenguaje
        --
        + conInstruccion(instruccion: String): Builder
        + conOpcion(opcion: String): Builder
        + conOpciones(opciones: ArrayList<String>): Builder
        + conRespuestaCorrecta(respuestaCorrecta: String): Builder
        + conRespuestasCorrectas(respuestasCorrectas: ArrayList<String>): Builder
        + conNivel(nivelDificultad: NivelDificultad): Builder
        + conLenguaje(lenguaje: Lenguaje): Builder
        + construir(): EjercicioSeleccion
    }

    class EjercicioCompletarCodigo {
        - codigoIncompleto: String
        - partesFaltantes: ArrayList<String>
        - respuestasEsperadas: ArrayList<String>
        --
        + obtenerCodigoIncompleto(): String
        + obtenerPartesFaltantes(): ArrayList<String>
        + obtenerRespuestasEsperadas(): ArrayList<String>
        + obtenerNumeroPartesFaltantes(): int
        + evaluarRespuestas(ArrayList<Respuesta>): ResultadoDeEvaluacion
    }

    class EjercicioCompletarCodigoBuilder {
        - instruccion: String
        - codigoIncompleto: String
        - partesFaltantes: ArrayList<String>
        - respuestasEsperadas: ArrayList<String>
        - nivelDificultad: NivelDificultad
        - lenguaje: Lenguaje
        --
        + conInstruccion(instruccion: String): Builder
        + conCodigoIncompleto(codigoIncompleto: String): Builder
        + conParteFaltante(parteFaltante: String): Builder
        + conPartesFaltantes(partesFaltantes: ArrayList<String>): Builder
        + conRespuestaEsperada(respuestaEsperada: String): Builder
        + conRespuestasEsperadas(respuestasEsperadas: ArrayList<String>): Builder
        + conNivel(nivelDificultad: NivelDificultad): Builder
        + conLenguaje(lenguaje: Lenguaje): Builder
        + construir(): EjercicioCompletarCodigo
    }


' Relaciones de ImplementaciÃ³n (Dependencia)
EjercicioBase ..|> EvaluadorRespuestas
RespuestaString ..|> Respuesta

' Relaciones de Herencia (Dependencia)
EjercicioSeleccion --|> EjercicioBase
EjercicioCompletarCodigo --|> EjercicioBase

' Relaciones de ComposiciÃ³n (ComposiciÃ³n fuerte - ciclo de vida compartido)
EjercicioBase --> NivelDificultad : "tiene"
EjercicioBase --> Lenguaje : "tiene"


' Relaciones de AsociaciÃ³n (Uso temporal)
EvaluadorRespuestas ..> Respuesta : "evalÃºa"
EvaluadorRespuestas ..> ResultadoDeEvaluacion : "retorna"

' Relaciones de Builder (AsociaciÃ³n de creaciÃ³n)
EjercicioSeleccionBuilder ..> EjercicioSeleccion : "construye"
EjercicioCompletarCodigoBuilder ..> EjercicioCompletarCodigo : "construye"
}

'Modulo Gestion de Aprendizaje'
title Diagrama de Clases - GestiÃ³n de Aprendizaje
package "GestionDeAprendizaje"{
    package "Logica" {
        class AprendizajeManager <<singleton>> {
            - static AprendizajeManager instancia
            - List<Curso> cursos
            --
            - AprendizajeManager()
            + static AprendizajeManager getInstancia()
            + void construirDatosDePrueba()
            + List<Curso> getCursos()
        }

        class Curso <<Entidad>> {
            - String id
            - String nombre
            - String descripcion
            - List<Ruta> rutas
            --
            + Curso(String id, String nombre, String descripcion)
            + void agregarRuta(Ruta ruta)
            + String getId()
            + String getNombre()
            + String getDescripcion()
            + List<Ruta> getRutas()
        }

        class Ruta <<Entidad>> {
            - String id
            - String nombre
            - String nivel
            - List<NodoRuta> nodos
            --
            + Ruta(String id, String nombre, String nivel)
            + void agregarNodo(NodoRuta nodo)
            + String getId()
            + String getNombre()
            + String getNivel()
            + List<NodoRuta> getNodos()
        }

        class NodoRuta <<Entidad>> {
            - int orden
            - boolean completado
            - Leccion leccion
            - List<RecursoAprendizaje> materialDeApoyo
            --
            + NodoRuta(int orden, Leccion leccion)
            + void agregarMaterialDeApoyo(RecursoAprendizaje recurso)
            + int getOrden()
            + boolean isCompletado()
            + void marcarComoCompletado()
            + Leccion getLeccion()
            + List<RecursoAprendizaje> getMaterialDeApoyo()
        }

        class ProgresoLecciones <<util>> {
            - static int leccionesCompletadas
            --
            + static void incrementarLeccionesCompletadas()
            + static int getLeccionesCompletadas()
        }
    }

    package "Modelo" {
        class RecursoAprendizaje <<abstract>> {
            - String titulo
            - String url
            - String tipo
            --
            + RecursoAprendizaje(String titulo, String url, String tipo)
            + String getTitulo()
            + String getUrl()
            + String getTipo()
        }

        class Articulo
        class DocumentoPDF
        class Video

        RecursoAprendizaje <|-- Articulo
        RecursoAprendizaje <|-- DocumentoPDF
        RecursoAprendizaje <|-- Video
    }



    ' Relaciones
    AprendizajeManager --> Curso
    Curso --> Ruta
    Ruta --> NodoRuta
    NodoRuta *-- RecursoAprendizaje
}

package Modulo_Leccion{

    class Leccion{
        - listEjercicio<EjercicioBase> : EjercicioBase
        - xpQueOtorga : int
        - completada : boolean
        - tema : TemaLeccion
        - calculoXP : CalculoXPStrategy
        + agregarEjercicio(Ejercicio nuevoEjercicio) : void
        + agregarEjerciciosLista(List<EjercicioBase>)
        + getNumeroEjercicios() : int
        + getListaEjercicios() : List<EjercicioBase>
        + setCompletada() : void
        + getXPcalculada(metodo : CalculoXPStrategy)
    }

    abstract class LeccionRepository{
    - filtroEjercicio : FiltroEjercicio
    + getLecciones(Lenguaje, NivelDificultad, TemaLeccion, nunEjercicios)
    }
    abstract class FiltroEjercicio{
    - siguiente : FiltroEjercicio
    + cambiarSiguiente : (siguiente : FiltroEjercicio)
    + filtrarEjercicio(Ejercicio ejercicio)
    # {abstract} filtrar(Ejercicio ejercicio)
    }


    enum TemaLeccion {
        CONTROL_DE_FLUJO
        TIPOS_Y_OPERADORES
        FUNCIONES_Y_METODOS
        CLASES_Y_ESTRUCTURAS
        ENTRADA_Y_SALIDA
        OTRO
    }

    interface CalculoXPStrategy <<Interface>>{
    + {abstract} calcularXP()
    }

    class CalculoBasico{
    - TIEMPO_MAXIMO
        - TIEMPO_OPTIMO
        - XP_MAXIMA
        - XP_MINIMA
    + calcularXP()
    }
    class CalculoLeccionSinErrores{
    - TIEMPO_MAXIMO
    - TIEMPO_OPTIMO
    - XP_MAXIMA
    - XP_MINIMA
    + calcularXP()
    }
    class CalculoLeccionSinVidas{
        - TIEMPO_MAXIMO
        - TIEMPO_OPTIMO
        - XP_MAXIMA
        - XP_MINIMA
    + calcularXP()
    }


    class FiltroPorTema{
    + filtrar(Ejercicio ejercicio)
    }
    class FiltroPorDificultad{
    + filtrar(Ejercicio ejercicio)
    }

    class FiltroPorLenguaje{
    + filtrar(Ejercicio ejercicio)
    }


    'Relaciones :
    LeccionRepository o--U> Leccion
    LeccionRepository --> FiltroEjercicio : "Usa"
    'Leccion --> TemaLeccion
    'Patron ChainOfResponsibility
    FiltroPorTema --U|> FiltroEjercicio
    FiltroPorDificultad --U|> FiltroEjercicio
    FiltroPorLenguaje --U|> FiltroEjercicio
    'Patron Strategy
    Leccion o--R> CalculoXPStrategy
    CalculoBasico ..u|> CalculoXPStrategy
    CalculoLeccionSinErrores ..u|> CalculoXPStrategy
    CalculoLeccionSinVidas ..u|> CalculoXPStrategy





}


package Modulo_Usuario{
    ' Enumeraciones
    enum TipoDeAcceso {
      USUARIO
      ADMINISTRADOR
    }

    enum NivelJava {
      PRINCIPIANTE
      INTERMEDIO
      AVANZADO
      EXPERTO
    }

    ' Clases
    abstract class UsuarioBase {
      - username: String
      - password: String
      + getUsername(): String
      + setUsername(String): void
      + getPassword(): String
      + setPassword(String): void
    }

    class Usuario {
      - nombre: String
      - email: String
      - xp: int
      - rol: TipoDeAcceso
      - curso: Curso

      + setCurso(Curso): void
      + registrarCurso(): void
      + fromString(String): Usuario
    }

    class UsuarioAdministrador {
      - idAdmin: String
      - esSuperAdmin: Boolean
      - static passwordCreacion: String
      + getIdAdmin(): String
      + setIdAdmin(String): void
      + getEsSuperAdmin(): Boolean
      + setEsSuperAdmin(Boolean): void
      + tieneAccesoModulo(TipoDeAcceso): boolean
    }

    class UsuarioComunidad {
      - idUsuario: String
      - nivelJava: NivelJava
      - reputacion: Integer
      - amigos: List<UsuarioTemp>
      + setReputacion(Integer): void
      + getAmigos(): List<UsuarioTemp>
      + setAmigos(List<UsuarioTemp>): void
      + agregarAmigo(UsuarioTemp): void
      + eliminarAmigo(UsuarioTemp): void
      + incrementarReputacion(int): void
      + decrementarReputacion(int): void
    }

    class UsuarioTemp {
      - idUsuario: String
      - nivelJava: NivelJava
      + getIdUsuario(): String
      + setIdUsuario(String): void
      + getNivelJava(): NivelJava
      + setNivelJava(NivelJava): void
      + fromString(String): UsuarioTemp
    }

    ' Relaciones de herencia
    UsuarioBase <|-- Usuario
    Usuario <|-- UsuarioAdministrador
    Usuario <|-- UsuarioComunidad
    Usuario <|-- UsuarioTemp

    ' AsociaciÃ³n
    UsuarioComunidad "1" -- "*" UsuarioTemp : amigos
    Usuario --> TipoDeAcceso
    UsuarioComunidad --> NivelJava
    UsuarioTemp --> NivelJava
}
package Conexion{
    class LeccionesCompletadas {
      - numeroLeccionesCompletadas: int
      + set(int): void
      + getLeccionesCompletadas(): int
      - compare(Usuario, String): boolean
    }

    class SesionManager {
      - instancia: SesionManager
      - usuarioAutenticado: Usuario
      - usuarioComunidad: UsuarioComunidad
      - usuarios: List<Usuario>
      + getInstancia(): SesionManager
      + guardarUsuarios(List<Usuario>): void
      + iniciarSesion(Usuario): void
      + cerrarSesion(): void
      + getUsuarios(): List<Usuario>
      + existeUsuarioAutenticado(): boolean
      + getUsuarioAutenticado(): Usuario
      + getUsuarioComunidad(): UsuarioComunidad
      + getNombreUsuarioActual(): String
      + getUsernameActual(): String
      + actualizarNivelJava(NivelJava): void
      + actualizarReputacion(int): void
      + setCurso(List<Curso>): void
      - convertirAUsuarioComunidad(Usuario): UsuarioComunidad
    }
}
ContextoSistema ..> SesionManager : "gestiona usuarios"
Ranking <.. LeccionesCompletadas
NodoRuta o--> Modulo_Leccion.Leccion
Modulo_Leccion.Leccion o--> EjercicioBase
GrupoDiscusion --> Modulo_Usuario.NivelJava
GrupoCompartir --> Modulo_Usuario.NivelJava


@enduml