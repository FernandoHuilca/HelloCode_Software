package integracion;

import controladores.*;
import servicios.ComunidadService;
import utilidades.InputHelper;
import utilidades.MenuHelper;

/**
 * Punto de entrada principal para el m√≥dulo de comunidad.
 * Esta clase ser√≠a llamada desde el m√≥dulo principal del sistema Duolingo.
 * Gestiona la inicializaci√≥n y coordinaci√≥n de todos los controladores de comunidad.
 */
public class ComunidadModuloEntry {
    
    private final IModuloUsuarios moduloUsuarios;
    private final ContextoSistema contexto;
    private final ComunidadService comunidadService;
    
    /**
     * Constructor que inicializa el m√≥dulo de comunidad con la integraci√≥n de usuarios.
     * @param moduloUsuarios Implementaci√≥n del m√≥dulo de usuarios del sistema principal
     */
    public ComunidadModuloEntry(IModuloUsuarios moduloUsuarios) {
        this.moduloUsuarios = moduloUsuarios;
        this.contexto = ContextoSistema.getInstance();
        this.comunidadService = new ComunidadService();
        
        // Establecer la integraci√≥n con el m√≥dulo de usuarios
        this.contexto.setModuloUsuarios(moduloUsuarios);
        
        // Verificar si hay un usuario activo y cargarlo
        cargarUsuarioActivo();
        
        // Inicializar datos de ejemplo si es necesario
        DatosEjemploFactory.crearDatosExtendidos(contexto);
    }
    
    /**
     * M√©todo principal para iniciar el m√≥dulo de comunidad.
     * Este m√©todo ser√≠a llamado desde el men√∫ principal del sistema Duolingo.
     */
    public void iniciarModuloComunidad() {
        System.out.println("üèõÔ∏è Bienvenido al M√≥dulo de Comunidad");
        
        // Verificar que hay un usuario autenticado
        if (moduloUsuarios.obtenerUsuarioActual() == null) {
            System.out.println("‚ùå Error: No hay usuario autenticado en el sistema.");
            return;
        }
        
        // Mostrar informaci√≥n del usuario actual
        mostrarInfoUsuarioActual();
        
        // Mostrar men√∫ principal de comunidad
        boolean salir = false;
        while (!salir) {
            MenuHelper.mostrarMenuPrincipal();
            int opcion = InputHelper.leerEntero("Seleccione una opci√≥n");
            
            switch (opcion) {
                case 1:
                    // Gesti√≥n de Usuarios
                    new UsuarioControlador(comunidadService, contexto).ejecutar();
                    break;
                case 2:
                    // Gesti√≥n de Comunidad
                    new ComunidadControlador(comunidadService, contexto).ejecutar();
                    break;
                case 3:
                    // Foros de Discusi√≥n
                    new ForoControlador(comunidadService, contexto).ejecutar();
                    break;
                case 4:
                    // Chat Privado
                    new ChatControlador(comunidadService, contexto).ejecutar();
                    break;
                case 5:
                    // Estad√≠sticas
                    new EstadisticasControlador(comunidadService, contexto).ejecutar();
                    break;
                case 6:
                    salir = true;
                    break;
                default:
                    System.out.println("Opci√≥n inv√°lida.");
            }
        }
        
        cerrarModulo();
    }
    
    /**
     * M√©todo para acceder directamente a un foro espec√≠fico.
     * √ötil cuando el usuario viene desde una notificaci√≥n o enlace directo.
     */
    public void accederForoDirecto(String idForo) {
        System.out.println("üéØ Acceso directo al foro: " + idForo);
        // Crear y ejecutar controlador de foro
        new ForoControlador(comunidadService, contexto).ejecutar();
    }
    
    /**
     * M√©todo para acceder directamente a un chat espec√≠fico.
     * √ötil para notificaciones de mensajes privados.
     */
    public void accederChatDirecto(String idChat) {
        System.out.println("üí¨ Acceso directo al chat: " + idChat);
        // Crear y ejecutar controlador de chat
        new ChatControlador(comunidadService, contexto).ejecutar();
    }
    
    /**
     * M√©todo para obtener estad√≠sticas r√°pidas del usuario en la comunidad.
     * √ötil para mostrar en el dashboard principal del sistema.
     */
    public String obtenerEstadisticasUsuario() {
        var usuario = moduloUsuarios.obtenerUsuarioActual();
        if (usuario == null) return "Usuario no disponible";
        
        return String.format(
            "Comunidad - Nivel: %s, Participaciones: %d, Puntos: %d",
            usuario.getNivelJava(),
            contexto.getParticipacionesUsuario(usuario.getNombre()),
            contexto.getPuntosUsuario(usuario.getNombre())
        );
    }
    
    /**
     * M√©todo para cerrar el m√≥dulo de comunidad y limpiar recursos.
     */
    public void cerrarModulo() {
        System.out.println("üîí Cerrando m√≥dulo de comunidad...");
        // Guardar estado si es necesario
        // Limpiar recursos
        System.out.println("‚úÖ M√≥dulo de comunidad cerrado correctamente.");
    }
    
    private void cargarUsuarioActivo() {
        var usuarioActual = moduloUsuarios.obtenerUsuarioActual();
        if (usuarioActual != null) {
            contexto.setUsuarioActivo(usuarioActual);
        }
    }
    
    private void mostrarInfoUsuarioActual() {
        var usuario = moduloUsuarios.obtenerUsuarioActual();
        if (usuario != null) {
            System.out.println("üë§ Usuario activo: " + usuario.getNombre());
            System.out.println("üìä Nivel de Java: " + usuario.getNivelJava());
            System.out.println("üéØ ¬°Listo para participar en la comunidad!");
            System.out.println("‚îÄ".repeat(50));
        }
    }
}
