@startuml DiagramaClasesFinal

skinparam class {
    BackgroundColor lightblue
    BorderColor black
    ArrowColor black
}
skinparam package {
    BackgroundColor lightgray
    BorderColor black
}

package "GestionAprendizaje_Modulo.Modelo" {
    abstract class RecursoAprendizaje {
        # titulo : String
        # lenguaje : String
        # tema : String
        # url : String
        + RecursoAprendizaje(String, String, String, String)
        + getTitulo() : String
        + getLenguaje() : String
        + getTema() : String
        + getUrl() : String
        + {abstract} obtenerDetalle() : String
        + toString() : String
    }

    class Video {
        - duracionEnSegundos : int
        + Video(String, String, String, String, int)
        + getDuracionEnSegundos() : int
        + obtenerDetalle() : String
    }

    class DocumentoPDF {
        - numeroDePaginas : int
        + DocumentoPDF(String, String, String, String, int)
        + obtenerDetalle() : String
    }

    class Articulo {
        + Articulo(String, String, String, String)
        + obtenerDetalle() : String
    }
}

package "GestionAprendizaje_Modulo.Repositorio" {
    class RecursoRepository {
        - {static} instancia : RecursoRepository
        - bancoDeRecursos : List<RecursoAprendizaje>
        - RecursoRepository()
        + {static} getInstancia() : RecursoRepository
        + cargarRecursosDesdeTXT() : void
        + buscarRecursosPorLenguajeYTema(String, String) : List<RecursoAprendizaje>
        - crearRecurso(String[]) : RecursoAprendizaje
    }
}

package "GestionAprendizaje_Modulo.Logica" {
    class Curso {
        - id : String
        - nombre : String
        - descripcion : String
        - rutas : List<Ruta>
        + Curso(String, String, String)
        + agregarRuta(Ruta) : void
        + getId() : String
        + getNombre() : String
        + getDescripcion() : String
        + getRutas() : List<Ruta>
    }

    class Ruta {
        - id : String
        - nombre : String
        - nivel : String
        - nodos : List<NodoRuta>
        + Ruta(String, String, String)
        + agregarNodo(NodoRuta) : void
        + getId() : String
        + getNombre() : String
        + getNivel() : String
        + getNodos() : List<NodoRuta>
    }

    class NodoRuta {
        - orden : int
        - completado : boolean
        - id : String
        - leccion : Leccion
        - materialDeApoyo : List<RecursoAprendizaje>
        + NodoRuta(int, String, Leccion)
        + getId() : String
        + getOrden() : int
        + getLeccion() : Leccion
    }

    class AprendizajeManager {
        - {static} instancia : AprendizajeManager
        - rutasPlantilla : List<Ruta>
        - progresoPorUsuario : Map<String, Map<String, Boolean>>
        - RUTA_ARCHIVO_PROGRESO : Path
        - completionPolicy : CompletionPolicy
        - AprendizajeManager()
        + {static} getInstancia() : AprendizajeManager
        + construirDatosDePrueba() : void
        + getCompletionPolicy() : CompletionPolicy
        + getRutaPorNombre(String) : Ruta
        + onLeccionCompletada(Usuario, Leccion) : void
        + isNodoCompletadoParaUsuario(Usuario, NodoRuta) : boolean
        + getLeccionesCompletadasParaUsuario(Usuario) : int
        + sincronizarBanderasParaUsuario(String) : void
        - construirRutaJava() : void
        - construirRutaPython() : void
        - construirRutaPhp() : void
        - construirRutaC() : void
        - guardarProgresoEnArchivo() : void
        - cargarProgresoDesdeArchivo() : void
    }

    enum CompletionPolicy {
        NODE_PROGRESS_ONLY
        LECCION_FLAG_ONLY
        EITHER
        BOTH
    }

    class ProgresoLecciones {
        + {static} getLeccionesCompletadas() : int
    }

    class ConfiguracionUsuarioService {
        - {static} ARCHIVO_CONFIGURACION : String
        - {static} instancia : ConfiguracionUsuarioService
        - ConfiguracionUsuarioService()
        + {static} getInstancia() : ConfiguracionUsuarioService
        + esPrimeraVez(String) : boolean
        + obtenerConfiguracion(String) : ConfiguracionUsuario
        + guardarConfiguracion(String, String, String) : void
        + guardarConfiguracionMultiple(String, List<String>, List<String>) : void
        + agregarLenguajesAlUsuario(String, List<String>, List<String>) : void
        + marcarUsuarioNuevo(String) : void
        - leerConfiguraciones() : List<ConfiguracionUsuario>
        - parsearLinea(List<ConfiguracionUsuario>, String) : void
        - escribirConfiguraciones(List<ConfiguracionUsuario>) : void
    }

    class ConfiguracionUsuario {
        - username : String
        - lenguajes : List<String>
        - niveles : List<String>
        - primeraVez : boolean
        + ConfiguracionUsuario(String, List<String>, List<String>, boolean)
        + ConfiguracionUsuario(String, String, String, boolean)
        + getUsername() : String
        + getLenguajes() : List<String>
        + getNiveles() : List<String>
        + isPrimeraVez() : boolean
        + getLenguaje() : String
        + getNivel() : String
        + setPrimeraVez(boolean) : void
        + agregarLenguaje(String, String) : void
        + tieneLinquaje(String) : boolean
        + getNivelParaLenguaje(String) : String
    }
}

package "GestionAprendizaje_Modulo.Controladores" {
    class RutaController {
        - contenidoVBox : VBox
        - tituloLenguajeLabel : Label
        - rootPane : AnchorPane
        - btnLibrary : Button
        - btnAdd : Button
        - usuarioActual : Usuario
        - rutaActual : Ruta
        - nivelDesbloqueado : int
        + initialize() : void
        - cargarDatosIniciales() : void
        - construirContenedoresVisuales() : void
        - crearContenedorUI(TemaLeccion, List<NodoRuta>, boolean) : VBox
        - determinarTemasVisibles() : int
        - agruparNodosPorTema() : Map<TemaLeccion, List<NodoRuta>>
        - calcularNivelDesbloqueado() : int
        - estanTodosCompletos(Map<TemaLeccion, List<NodoRuta>>, int, int) : boolean
        - configurarListenersBotones() : void
        - abrirVentanaDeRecursos(String, TemaLeccion) : void
        - capitalizar(String) : String
        + manejarAtras() : void
    }

    class DiagnosticoController {
        + {static} nivelSeleccionado : String
        + {static} lenguajeSeleccionado : String
        - tituloLabel : Label
        - rbNivelBasico : RadioButton
        - rbNivelIntermedio : RadioButton
        - rbNivelAvanzado : RadioButton
        - btnContinuar : Button
        - nivelGroup : ToggleGroup
        + initialize() : void
        + setDiagnosticoText(String) : void
    }

    class MisLenguajesController {
        - lenguajesContainer : VBox
        - rootPane : AnchorPane
        - btnAtras : Button
        - btnHome : Button
        - btnAdd : Button
        - btnLibrary : Button
        - usuarioActual : Usuario
        + initialize() : void
        - cargarLenguajesDelUsuario() : void
        - crearTarjetaLenguaje(String, String) : VBox
        - configurarBotones() : void
    }

    class SeleccionMultipleLenguajesController {
        - lenguajesContainer : VBox
        - btnContinuar : Button
        - btnVolver : Button
        - checkBoxLenguajes : Map<String, CheckBox>
        - comboBoxNiveles : Map<String, ComboBox<String>>
        + initialize() : void
        - crearOpcionesLenguajes() : void
        - deshabilitarLenguajesExistentes() : void
        - configurarBotones() : void
    }

    class WebController {
        - webView : WebView
        - titleLabel : Label
        - backButton : Button
        - forwardButton : Button
        - progressBar : ProgressBar
        - currentUrl : String
        + initialize() : void
        + cargarUrl(String) : void
        + loadUrl(String) : void
        + establecerTituloVentanaPorDefecto(String) : void
        + setWindowTitleFallback(String) : void
        - irAtras() : void
        - irAdelante() : void
        - recargar() : void
        - abrirEnNavegadorExterno() : void
        - cerrarVentana() : void
        - detenerMedios() : void
        - abrirExterno(String) : void
    }

    class CursosController {
        - tituloLenguajeLabel : Label
        - btnJava : Button
        - btnPython : Button
        - btnPhp : Button
        - btnCplusplus : Button
        - btnVolver : Button
        + initialize() : void
        - abrirDiagnostico(String) : void
    }

    class RecursosTemaController {
        + setRecursos(String, List<RecursoAprendizaje>) : void
    }
}

' Relaciones de Herencia
RecursoAprendizaje <|-- Video
RecursoAprendizaje <|-- DocumentoPDF
RecursoAprendizaje <|-- Articulo

' Composición y Agregación
Curso *-- Ruta : contiene
Ruta *-- NodoRuta : contiene
NodoRuta o-- RecursoAprendizaje : materialDeApoyo

' Clase anidada (inner class)
ConfiguracionUsuarioService +-- ConfiguracionUsuario : inner class

' Enum anidado
AprendizajeManager +-- CompletionPolicy : nested enum

' Dependencias y Asociaciones principales
AprendizajeManager -- Ruta : gestiona
RecursoRepository -- RecursoAprendizaje : almacena
ConfiguracionUsuarioService -- ConfiguracionUsuario : maneja

' Controladores y sus dependencias
RutaController ..> AprendizajeManager : usa
RutaController ..> RecursoRepository : consulta
RutaController ..> Ruta : visualiza
DiagnosticoController ..> ConfiguracionUsuarioService : guarda
MisLenguajesController ..> ConfiguracionUsuarioService : consulta
SeleccionMultipleLenguajesController ..> ConfiguracionUsuarioService : usa
WebController ..> RecursoAprendizaje : muestra
CursosController ..> ConfiguracionUsuarioService : valida
RecursosTemaController ..> RecursoAprendizaje : muestra

' Referencias a clases externas (solo menciones, sin paquete)
ProgresoLecciones ..> AprendizajeManager : delega
AprendizajeManager ..> "Usuario" : gestiona progreso
AprendizajeManager ..> "Leccion" : procesa
AprendizajeManager ..> "LeccionRepository" : consulta
NodoRuta ..> "Leccion" : contiene
RutaController ..> "TemaLeccion" : clasifica
RutaController ..> "Usuario" : obtiene datos
RutaController ..> "LeccionUIController" : llama a

@enduml