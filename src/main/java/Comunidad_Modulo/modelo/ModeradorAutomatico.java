package Comunidad_Modulo.modelo;

import Modulo_Usuario.Clases.UsuarioComunidad;
import Comunidad_Modulo.servicios.ModeracionService.ResultadoModeracion;

/**
 * Moderador Autom√°tico - Representa al sistema autom√°tico de moderaci√≥n
 * Responsable de: filtrado de contenido, detecci√≥n de spam, aplicaci√≥n autom√°tica de reglas
 */
public class ModeradorAutomatico extends ModeradorBase {

    private boolean filtroActivado;
    private int nivelStricto; // 1=b√°sico, 2=medio, 3=estricto

    public ModeradorAutomatico() {
        super("Sistema de Moderaci√≥n Autom√°tica", "sistema-auto");
        this.filtroActivado = true;
        this.nivelStricto = 2; // Nivel medio por defecto
    }

    public ModeradorAutomatico(int nivelStricto) {
        this();
        this.nivelStricto = Math.max(1, Math.min(3, nivelStricto)); // Entre 1 y 3
    }

    // ========== OPERACIONES AUTOM√ÅTICAS ESPEC√çFICAS ==========

    /**
     * Modera un mensaje autom√°ticamente antes de publicarlo
     */
    public ResultadoModeracion moderarMensajeAutomatico(String contenido, UsuarioComunidad autor) {
        if (!filtroActivado) {
            return new ResultadoModeracion(true, "Filtro desactivado", null);
        }

        System.out.println("ü§ñ Moderaci√≥n autom√°tica de mensaje de: " + autor.getUsername());
        
        ResultadoModeracion resultado = moderacionService.moderarMensaje(contenido, autor, this.nombre);
        
        if (!resultado.isAprobado()) {
            System.out.println("üö´ Mensaje bloqueado autom√°ticamente: " + resultado.getMensaje());
            
            // Aplicar sanci√≥n autom√°tica si es necesario seg√∫n el nivel de stricto
            if (nivelStricto >= 2 && debeAplicarSancionAutomatica(resultado.getMensaje())) {
                aplicarSancionAutomatica(autor, resultado.getMensaje());
            }
        }
        
        return resultado;
    }

    /**
     * Aplica una sanci√≥n autom√°tica basada en reglas del sistema
     */
    public SancionUsuario aplicarSancionAutomatica(UsuarioComunidad usuario, String razon) {
        int duracionMinutos = calcularDuracionSancion(razon);
        
        System.out.println("‚ö° Aplicando sanci√≥n autom√°tica a " + usuario.getUsername() + 
                         " por " + duracionMinutos + " minutos");
        
        return moderacionService.aplicarSancion(usuario, 
                                              "AUTOM√ÅTICO: " + razon, 
                                              duracionMinutos, 
                                              this.nombre);
    }

    /**
     * Escanea autom√°ticamente todos los mensajes de un foro
     */
    public void escanearForoAutomatico(ForoGeneral foro) {
        System.out.println("üîç Escaneando foro autom√°ticamente: " + foro.toString());
        
        // Aqu√≠ se podr√≠a implementar l√≥gica para revisar todos los mensajes del foro
        // y aplicar moderaci√≥n autom√°tica retroactiva
        
        System.out.println("‚úÖ Escaneo autom√°tico completado");
    }

    /**
     * Detecta patrones de spam o comportamiento sospechoso
     */
    public boolean detectarSpam(UsuarioComunidad usuario, String contenido) {
        // Implementaci√≥n b√°sica de detecci√≥n de spam
        
        // Verificar mensajes repetitivos
        if (contenido.length() < 5) {
            System.out.println("‚ö†Ô∏è Detectado mensaje muy corto de " + usuario.getUsername());
            return true;
        }
        
        // Verificar enlaces sospechosos
        if (contenido.toLowerCase().contains("http") && nivelStricto >= 2) {
            System.out.println("‚ö†Ô∏è Detectado enlace en mensaje de " + usuario.getUsername());
            return true;
        }
        
        // Verificar palabras en may√∫sculas excesivas
        long mayusculas = contenido.chars().filter(Character::isUpperCase).count();
        if (mayusculas > contenido.length() * 0.7 && contenido.length() > 10) {
            System.out.println("‚ö†Ô∏è Detectado exceso de may√∫sculas de " + usuario.getUsername());
            return true;
        }
        
        return false;
    }

    /**
     * Monitorea autom√°ticamente la actividad de los usuarios
     */
    public void monitorearActividadUsuarios() {
        System.out.println("üìä Monitoreando actividad de usuarios autom√°ticamente...");
        
        for (Comunidad comunidad : comunidadesGestionadas) {
            for (UsuarioComunidad usuario : comunidad.getUsuariosConectados()) {
                if (usuarioEstaSancionado(usuario)) {
                    continue; // Saltar usuarios ya sancionados
                }
                
                // Aqu√≠ se podr√≠a implementar l√≥gica m√°s compleja de monitoreo
                System.out.println("   ‚úì Usuario monitoreado: " + usuario.getUsername());
            }
        }
    }

    // ========== M√âTODOS DE CONFIGURACI√ìN ==========

    public void activarFiltro() {
        this.filtroActivado = true;
        System.out.println("üîß Filtro autom√°tico activado");
    }

    public void desactivarFiltro() {
        this.filtroActivado = false;
        System.out.println("üîß Filtro autom√°tico desactivado");
    }

    public void setNivelStricto(int nivel) {
        this.nivelStricto = Math.max(1, Math.min(3, nivel));
        System.out.println("üîß Nivel de moderaci√≥n establecido en: " + 
                         (nivel == 1 ? "B√°sico" : nivel == 2 ? "Medio" : "Estricto"));
    }

    // ========== M√âTODOS DE ESTAD√çSTICAS ==========

    public void mostrarEstadisticasAutomaticas() {
        System.out.println("\nü§ñ === ESTAD√çSTICAS DEL MODERADOR AUTOM√ÅTICO ===");
        System.out.println("Estado del filtro: " + (filtroActivado ? "Activo" : "Inactivo"));
        System.out.println("Nivel de moderaci√≥n: " + 
                         (nivelStricto == 1 ? "B√°sico" : nivelStricto == 2 ? "Medio" : "Estricto"));
        
        var stats = moderacionService.getEstadisticas();
        System.out.println("üìä " + stats.toString());
        
        System.out.println("üåê Comunidades monitoreadas: " + comunidadesGestionadas.size());
        System.out.println("=".repeat(50));
    }

    // ========== M√âTODOS AUXILIARES PRIVADOS ==========

    private boolean debeAplicarSancionAutomatica(String razon) {
        // Define cu√°ndo el sistema debe aplicar sanciones autom√°ticas
        return razon.toLowerCase().contains("spam") || 
               razon.toLowerCase().contains("ofensivo") ||
               razon.toLowerCase().contains("repetitivo");
    }

    private int calcularDuracionSancion(String razon) {
        // Calcula la duraci√≥n de la sanci√≥n basada en la raz√≥n
        if (razon.toLowerCase().contains("spam")) {
            return 30; // 30 minutos por spam
        } else if (razon.toLowerCase().contains("ofensivo")) {
            return 60; // 1 hora por contenido ofensivo
        } else {
            return 15; // 15 minutos por defecto
        }
    }

    // ========== GETTERS ==========

    public boolean isFiltroActivado() {
        return filtroActivado;
    }

    public int getNivelStricto() {
        return nivelStricto;
    }
}
