@startuml Comunidad_Modulo_Simplificado

package "Comunidad_Modulo" {
    
    package "modelo" {
        
        class Comunidad {
            - String idComunidad
            - String nombre
            - String descripcion
            - ForoGeneral foroGeneral
            - List<ChatPrivado> chatsPrivados
            - List<UsuarioComunidad> usuariosMiembros
            - List<UsuarioComunidad> usuariosConectados
            - IModerador moderador
            --
            + unirUsuario(UsuarioComunidad): void
            + conectarUsuario(UsuarioComunidad): void
            + iniciarChatPrivado(List<UsuarioComunidad>): ChatPrivado
            + obtenerEstadisticas(): String
        }
        
        class ForoGeneral {
            - List<GrupoDiscusion> gruposDiscusion
            - List<GrupoCompartir> gruposCompartir
            --
            + crearGrupoDiscusion(String, NivelProgramacion, TipoTema): GrupoDiscusion
            + crearGrupoCompartir(String, NivelProgramacion, TipoTema): GrupoCompartir
            + buscarGruposDiscusionRecomendados(UsuarioComunidad): List<GrupoDiscusion>
        }
        
        class GrupoDiscusion {
            - String idGrupo
            - String titulo
            - NivelProgramacion nivelProgramacion
            - TipoTema tipoTema
            - List<UsuarioComunidad> miembros
            - List<HiloDiscusion> hilos
            --
            + unirseGrupo(UsuarioComunidad): void
            + esApropiado(UsuarioComunidad): boolean
        }
        
        class GrupoCompartir {
            - String idGrupo
            - String titulo
            - NivelProgramacion nivelProgramacion
            - TipoTema tipoTema
            - List<UsuarioComunidad> miembros
            - List<Solucion> soluciones
            --
            + compartirSolucion(Solucion): void
            + unirseGrupo(UsuarioComunidad): void
        }
        
        class HiloDiscusion {
            - String idHilo
            - String titulo
            - String problema
            - UsuarioComunidad autor
            - EstadoHilo estado
            - List<Respuesta> respuestas
            --
            + responder(String, UsuarioComunidad): void
            + votar(UsuarioComunidad, int): void
            + marcarResuelto(): void
        }
        
        class Respuesta {
            - String idRespuesta
            - String contenido
            - UsuarioComunidad autor
            - Map<String, Integer> votosUsuarios
            --
            + votar(UsuarioComunidad, int): void
            + marcarComoSolucion(): void
        }
        
        class ChatPrivado {
            - String idChat
            - List<UsuarioComunidad> participantes
            - List<Mensaje> mensajes
            --
            + enviarMensaje(String, UsuarioComunidad): void
            + obtenerHistorial(): List<Mensaje>
        }
        
        class Mensaje {
            - String idMensaje
            - String contenido
            - UsuarioComunidad emisor
            - LocalDateTime fechaEnvio
            --
            + marcarComoLeido(): void
        }
        
        class Solucion {
            - String idSolucion
            - String titulo
            - String contenido
            - UsuarioComunidad autor
            - TipoSolucion tipoSolucion
            - List<Comentario> comentarios
            --
            + votar(UsuarioComunidad, int): void
            + comentar(String, UsuarioComunidad): void
        }
        
        class Comentario {
            - String idComentario
            - String contenido
            - UsuarioComunidad autor
            --
            + votar(UsuarioComunidad, int): void
        }
        
        interface IModerador {
            + getNombre(): String
            + getUsername(): String
            + asignarComunidad(Comunidad): void
            + usuarioEstaSancionado(UsuarioComunidad): boolean
            + getSancionActiva(UsuarioComunidad): SancionUsuario
        }
        
        class ModeradorManual {
            - String nombre
            - String username
            --
            + cerrarHilo(HiloDiscusion): void
            + aplicarSancionManual(UsuarioComunidad, String, int): SancionUsuario
            + expulsarUsuarioDeComunidad(UsuarioComunidad, Comunidad): void
        }
        
        class ModeradorAutomatico {
            - String nombre
            - boolean filtroActivado
            - int nivelStricto
            --
            + moderarMensajeAutomatico(String, UsuarioComunidad): boolean
            + aplicarSancionAutomatica(UsuarioComunidad, String): SancionUsuario
            + setNivelStricto(int): void
        }
        
        class SancionUsuario {
            - String idSancion
            - UsuarioComunidad usuario
            - String razon
            - LocalDateTime fechaInicio
            - LocalDateTime fechaFin
            - boolean activa
            --
            + estaActiva(): boolean
            + levantarSancion(): void
        }
    }
    
    package "enums" {
        enum TipoTema {
            SINTAXIS
            POO
            ESTRUCTURAS_DATOS
            ALGORITMOS
            EXCEPCIONES
            FRAMEWORKS
        }
        
        enum EstadoHilo {
            ABIERTO
            CERRADO
            RESUELTO
        }
        
        enum TipoSolucion {
            CODIGO
            IMAGEN
            TEXTO
        }
    }
    
    package "servicios" {
        class PersistenciaService {
            --
            + guardarComunidades(List<Comunidad>): void
            + cargarComunidades(): List<Comunidad>
            + guardarChats(List<ChatPrivado>): void
            + cargarChats(): List<ChatPrivado>
        }
    }
    
    package "controladores" {
        class ContextoSistema <<Singleton>> {
            - static ContextoSistema instancia
            - List<Comunidad> comunidades
            - Comunidad comunidadActual
            - UsuarioComunidad usuarioActivo
            --
            - ContextoSistema()
            + getInstance(): ContextoSistema {static}
            + crearComunidad(String, String): Comunidad
            + obtenerComunidades(): List<Comunidad>
            + setUsuarioActivo(UsuarioComunidad): void
            + setComunidadActual(Comunidad): void
        }
    }

    package "Módulo Usuario" {
        enum NivelProgramacion {
            PRINCIPIANTE
            INTERMEDIO
            AVANZADO
            EXPERTO
        }

        class UsuarioComunidad {
            - String idUsuario
            - String nombre
            - String username
            - String email
            - NivelProgramacion nivelProgramacion
            --
            + getNombre(): String
            + getUsername(): String
            + getNivelProgramacion(): NivelProgramacion
        }
    }
}

' === RELACIONES PRINCIPALES (SIMPLIFICADAS) ===
Comunidad *-- ForoGeneral
Comunidad --> ChatPrivado
Comunidad --> UsuarioComunidad
Comunidad --> IModerador

ForoGeneral --> GrupoDiscusion
ForoGeneral --> GrupoCompartir

GrupoDiscusion *-- HiloDiscusion
GrupoCompartir --> Solucion

HiloDiscusion *-- Respuesta
ChatPrivado *-- Mensaje

Solucion --> Comentario

' === RELACIONES DE MODERACIÓN ===
IModerador <|.. ModeradorManual : "implementa"
IModerador <|.. ModeradorAutomatico : "implementa"
ModeradorAutomatico --> SancionUsuario : "gestiona"
ModeradorManual --> SancionUsuario : "gestiona"

' === RELACIONES CON ENUMS ===
GrupoDiscusion --> TipoTema
GrupoDiscusion --> NivelProgramacion
GrupoCompartir --> TipoTema
GrupoCompartir --> NivelProgramacion
HiloDiscusion --> EstadoHilo
Solucion --> TipoSolucion

' === RELACIONES DE SERVICIOS ===
ContextoSistema --> Comunidad
ContextoSistema --> UsuarioComunidad
ContextoSistema --> ContextoSistema
PersistenciaService --> Comunidad

@enduml