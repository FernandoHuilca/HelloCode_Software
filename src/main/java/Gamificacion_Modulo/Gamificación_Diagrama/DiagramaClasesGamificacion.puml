@startuml


package "Gamificacion_Modulo" {

    class Estudiante {
        - {static} contadorId : Long
        - id : Long
        - nombre : String
        - email : String
        - usuario : String

        + Estudiante(nombre: String, email: String, usuario: String)

    }

    class Logro {
        - nombre : String
        - descripcion : String
        - puntajeUmbral : Integer
        - fechaObtencion : Date

        + Logro(nombre: String, descripcion: String, criterios: String, umbral: Integer)
        + verificarComplecion(progreso: ProgresoEstudiante) : Boolean
    }

    abstract class Desafio {
        - puntosRecompensa : Integer
        - fechaInicio : LocalDateTime
        - fechaFin : LocalDateTime
        - estaActivo : Boolean
        - logrosDisponibles : List<Logro>
        - leccionesCompletadas : Integer
        - meta : Integer
        'Cual es la diferencia entre verificarComplecion y estaCompletado?
        + Desafio(logros: List<Logro>)
        + activar() : void
        + desactivar() : void
        + verificarComplecion(estudiante: ProgresoEstudiante) : Boolean
        + desbloquearLogro(logro: Logro, estudiante: ProgresoEstudiante) : Boolean
        + completarDesafio(estudiante: ProgresoEstudiante) : void
        + estaCompletado() : Boolean
        + simularDesafio():
    }

    class DesafioSemanal {

        + DesafioSemanal(metaSemanal: Integer, logros: List<Logro>)
        + estaCompletado() : Boolean
        + actualizarAvanze(cantidad: Integer) : void
    }

    class DesafioMensual {

        + DesafioMensual(objetivoMensual: Integer, logros: List<Logro>)
        + estaCompletado() : Boolean
        + actualizarActividades(cantidad: Integer) : void
    }

    class ProgresoEstudiante {
        - estudiante : Estudiante
        - logrosDesbloqueados : List<Logro>
        - puntosTotal : Integer
        - desafiosCompletados : Integer
        - desafiosActivos : List<Desafio>

        + ProgresoEstudiante(estudiante: Estudiante)
        + actualizarProgreso(desafio: Desafio) : void
        + actualizarLogro(logro: Logro) : void
        + actualizarDesafio(desafio: Desafio) : void
        + actualizarPuntos(puntos: Integer) : void
    }

    class Ranking {
        - rankingGeneral : List<ProgresoEstudiante>
        -INSTANCE

        - Ranking()
        + getInstance() : Ranking
        + actualizarRanking(estudiante: ProgresoEstudiante) : void
        + obtenerRanking() : List<ProgresoEstudiante>
        + calcularPosicion(estudiante: ProgresoEstudiante) : Integer
    }
    Ranking ->Ranking: getInstance()
    ' Relaciones de Herencia
    Desafio <|-- DesafioSemanal
    Desafio <|-- DesafioMensual

    ' Relaciones de ComposiciÃ³n
    ProgresoEstudiante *-- Estudiante : "contiene"


    ' Relaciones de Dependencia
    Logro ..> ProgresoEstudiante : "cumpleCriterios()"
    Desafio .> ProgresoEstudiante : "verificarComplecion()"
    Desafio .> ProgresoEstudiante : "completarDesafio()"
    Ranking ..> ProgresoEstudiante : "actualizarRanking()"

}

@enduml