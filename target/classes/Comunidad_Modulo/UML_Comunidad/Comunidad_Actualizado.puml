@startuml Comunidad_Modulo_Simplificado

!define ENTITY_COLOR #E1F5FE
!define ENUM_COLOR #FFF3E0
!define CONTROLLER_COLOR #F3E5F5
!define INTERFACE_COLOR #FFFDE7

package "Comunidad_Modulo" {
    
    package "modelo" <<ENTITY_COLOR>> {
        
        class Comunidad {
            - String idComunidad
            - String nombre
            - String descripcion
            - ForoGeneral foroGeneral
            - List<ChatPrivado> chatsPrivados
            - List<UsuarioComunidad> usuariosMiembros
            - List<UsuarioComunidad> usuariosConectados
            - LocalDateTime fechaCreacion
            - Moderador moderador
            --
            + setNombre(String): void
            + setDescripcion(String): void
            + setModerador(Moderador): void
            + agregarChatPrivado(ChatPrivado): void
            + agregarUsuarioMiembro(UsuarioComunidad): void
            + unirUsuario(UsuarioComunidad): void
            + removerUsuario(UsuarioComunidad): void
            + conectarUsuario(UsuarioComunidad): void
            + obtenerEstadisticas(): String
        }
        
        class ForoGeneral {
            - String idForo
            - List<GrupoDiscusion> gruposDiscusion
            - List<GrupoCompartir> gruposCompartir
            --
            + crearGrupoDiscusion(String, NivelJava, TipoTema): GrupoDiscusion
            + crearGrupoCompartir(String, NivelJava, TipoTema): GrupoCompartir
        }
        
        class GrupoDiscusion {
            - String idGrupo
            - String titulo
            - NivelJava nivelJava
            - TipoTema tipoTema
            - List<UsuarioComunidad> miembros
            - List<HiloDiscusion> hilos
            --
            + getTitulo(String): void
            + getNivelJava(NivelJava): void
            + getTipoTema(TipoTema): void
            + addHilo: void
            + unirseGrupo(UsuarioComunidad): void
            + esApropiado(UsuarioComunidad): boolean
        }
        
        class GrupoCompartir {
            - String idGrupo
            - String titulo
            - NivelJava nivelJava
            - TipoTema tipoTema
            - List<UsuarioComunidad> miembros
            - List<Solucion> soluciones
            --
            + getTitulo(String): void
            + getNivelJava(NivelJava): void
            + getTipoTema(TipoTema): void
            + compartirSolucion(Solucion): void
            + unirseGrupo(UsuarioComunidad): void
            + salirGrupo(UsuarioComunidad): void
            + esApropiado(UsuarioComunidad): boolean
        }
        
        class HiloDiscusion {
            - String idHilo
            - String titulo
            - String problema
            - UsuarioComunidad autor
            - EstadoHilo estado
            - Map<String, Integer> votosUsuarios
            - LocalDateTime fechaCreacion
            - List<Respuesta> respuestas
            --
            + setTitulo(String): void
            + setProblema(String): void
            + setEstado(EstadoHilo): void
            + responder(String, UsuarioComunidad, Moderador): boolean
            + responder(String, UsuarioComunidad): void @Deprecated
            + votar(UsuarioComunidad, int): void
            + getVotosPositivos(): int
            + getVotosNegativos(): int
            + marcarResuelto(): void
            + cerrar(): void
            + reabrir(): void
            + getSoluciones(): List<Respuesta>
        }
        
        class Respuesta {
            - String idRespuesta
            - String contenido
            - UsuarioComunidad autor
            - LocalDateTime fechaPublicacion
            - Map<String, Integer> votosUsuarios
            - Boolean esSolucion
            --
            + getVotosUsuarios(): Map<String, Integer>
            + setContenido(String): void
            + votar(UsuarioComunidad, int): void
            + marcarComoSolucion(): void
            + desmarcarComoSolucion(): void
        }
        
        class ChatPrivado {
            - String idChat
            - List<UsuarioComunidad> participantes
            - List<Mensaje> mensajes
            - LocalDateTime fechaCreacion
            --
            + enviarMensaje(String, UsuarioComunidad, Moderador): boolean
            + enviarMensaje(String, UsuarioComunidad): void @Deprecated
            + obtenerHistorial(): List<Mensaje>
        }
        
        class Mensaje {
            - String idMensaje
            - String contenido
            - UsuarioComunidad emisor
            - LocalDateTime fechaEnvio
            - boolean leido
            --
            + setContenido(String): void
            + marcarComoLeido(): void
        }
        
        class Solucion {
            - String idSolucion
            - String titulo
            - String contenido
            - UsuarioComunidad autor
            - TipoSolucion tipoSolucion
            - String archivo
            - LocalDateTime fechaPublicacion
            - Map<String, Integer> votosUsuarios
            - List<Comentario> comentarios
            --
            + setTitulo(String): void
            + setContenido(String): void
            + setTipoSolucion(TipoSolucion): void
            + setArchivo(String): void
            + votar(UsuarioComunidad, int): void
            + comentar(String, UsuarioComunidad): void
            + eliminarComentario(String): void
        }
        
        class Comentario {
            - String idComentario
            - String contenido
            - UsuarioComunidad autor
            - LocalDateTime fechaPublicacion
            - Map<String, Integer> votosUsuarios
            --
            + votar(UsuarioComunidad, int): void
            + getVotosUsuarios(): Map<String, Integer>
            + setContenido(String): void
        }
        
        class Moderador {
            - String idModerador
            - String nombre
            - String username
            - List<Comunidad> comunidadesGestionadas
            - ModeracionService moderacionService
            --
            + asignarComunidad(Comunidad): void
            + moderarMensaje(String, UsuarioComunidad): ResultadoModeracion
            + usuarioEstaSancionado(UsuarioComunidad usuario)
            + getSancionActiva(UsuarioComunidad): SancionUsuario
        }
        
        class SancionUsuario {
            - String idSancion
            - UsuarioComunidad usuario
            - String razon
            - LocalDateTime fechaInicio
            - LocalDateTime fechaFin
            - boolean activa
            --
            + estaActiva(): boolean
            + levantarSancion(): void
            + getMinutosRestantes(): long
        }
    }
    
    package "enums" <<ENUM_COLOR>> {
        enum TipoTema {
            SINTAXIS
            POO
            ESTRUCTURAS_DATOS
            ALGORITMOS
            EXCEPCIONES
            FRAMEWORKS
        }
        
        enum EstadoHilo {
            ABIERTO
            CERRADO
            RESUELTO
        }
        
        enum TipoSolucion {
            CODIGO
            IMAGEN
            TEXTO
        }
        
        enum TipoInfraccion {
            LENGUAJE_OFENSIVO
            SPAM
            CAPS_LOCK
            REPETICION
            FUERA_TEMA
            NINGUNA
        }

    }
    
    package "controladores" <<CONTROLLER_COLOR>> {
        class ContextoSistema {
            - static ContextoSistema instancia
            - List<UsuarioComunidad> usuarios
            - List<Comunidad> comunidades
            - List<Moderador> moderadores
            - Comunidad comunidadActual
            - Map<String, Integer> participacionesUsuario
            - Map<String, Integer> puntosUsuario
            - PersistenciaService persistenciaService
            --
            + getInstance(): ContextoSistema {static}
            + agregarComunidad(Comunidad): void
            + eliminarComunidad(Comunidad): void
            + actualizarComunidad(Comunidad): void
            + limpiar(): void
            + tieneComunidadActiva(): boolean
            + getTotalUsuarios(): int
            + getTotalComunidades(): int
            + establecerComunidadActivaParaUsuario(): void
            + cargarDatosDesdePersistencia(): void
            + conectarUsuarioAComunidad(UsuarioComunidad, Comunidad): void
            + desconectarUsuarioDeComunidad(UsuarioComunidad, Comunidad): void
            + guardarGrupoForo(Comunidad, String creador): void
            + guardarChatPrivado(Comunidad, ChatPrivado): void
        }
    }

    package "MÃ³duloUsuario" <<INTERFACE_COLOR>> {
                    enum NivelJava {
                                PRINCIPIANTE
                                INTERMEDIO
                                AVANZADO
                                EXPERTO
                    }

                    enum Roles{
                        USUARIO,
                        ADMIN_COMUNIDAD
                    }

                    class Usuario{
                    }

    }

' Relaciones principales del modelo - Simplificadas
Comunidad *-- ForoGeneral : "contiene"
Comunidad --> ChatPrivado : "gestiona"
Comunidad --> UsuarioComunidad : "usuarios conectados"
Comunidad --> Moderador : "tiene moderador"

ForoGeneral --> GrupoDiscusion : "contiene grupos"
ForoGeneral --> GrupoCompartir : "contiene grupos"

GrupoDiscusion *-- HiloDiscusion : "contiene hilos"
GrupoDiscusion --> UsuarioComunidad : "miembros"
GrupoCompartir --> Solucion : "contiene"
GrupoCompartir --> UsuarioComunidad : "miembros"

HiloDiscusion *-- Respuesta : "tiene respuestas"
HiloDiscusion --> UsuarioComunidad : "autor"

ChatPrivado *-- Mensaje : "contiene mensajes"
ChatPrivado --> UsuarioComunidad : "participantes"

Solucion --> Comentario : "tiene comentarios"
Solucion --> UsuarioComunidad : "autor"

Mensaje --> UsuarioComunidad : "emisor"
Respuesta --> UsuarioComunidad : "autor"
Comentario --> UsuarioComunidad : "autor"

Moderador --> SancionUsuario : "aplica sanciones"
SancionUsuario --> UsuarioComunidad : "usuario sancionado"
Usuario --> UsuarioComunidad : "es un"

' Relaciones con enums - Simplificadas
GrupoDiscusion --> TipoTema
GrupoDiscusion --> NivelJava
GrupoCompartir --> TipoTema
GrupoCompartir --> NivelJava
HiloDiscusion --> EstadoHilo
Solucion --> TipoSolucion

' Relaciones de controladores - Simplificadas
ContextoSistema --> UsuarioComunidad : "gestiona usuarios"
ContextoSistema --> Comunidad : "gestiona comunidades"  
ContextoSistema --> Moderador : "gestiona moderadores"
ContextoSistema --> ContextoSistema : "instancia {static}"

@enduml
