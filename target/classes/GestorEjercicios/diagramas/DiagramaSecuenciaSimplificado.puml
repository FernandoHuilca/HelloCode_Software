@startuml DiagramaSecuenciaSimplificado

!define RECTANGLE participant

' Estilos
skinparam sequence {
    ArrowColor DarkBlue
    ActorBorderColor DarkBlue
    LifeLineBorderColor DarkBlue
    LifeLineBackgroundColor LightBlue
    ParticipantBorderColor DarkBlue
    ParticipantBackgroundColor LightBlue
    ParticipantFontColor Black
}

' Actores y participantes principales
actor "Módulo Externo" as ModuloExterno
participant "GestorEjerciciosEntry" as Entry
participant "GestorEjerciciosPrincipal" as Principal
participant "Leccion" as Leccion
participant "GestorProgresoUsuario" as GestorProgreso
participant "Usuario" as Usuario

' ===== FLUJO PRINCIPAL: CREAR Y COMPLETAR LECCIÓN =====
group "Flujo Principal: Crear y Completar Lección"
    
    ' 1. Inicialización
    ModuloExterno -> Entry: inicializar()
    Entry -> ModuloExterno: Módulo listo
    
    ' 2. Crear lección
    ModuloExterno -> Entry: crearLeccionNormal("Fundamentos", ejercicios)
    Entry -> Principal: crearLeccion("Fundamentos", ejercicios, NORMAL, 15, 5)
    Principal -> Leccion: new Leccion(id, nombre, ejercicios, NORMAL, 15, 5)
    Principal -> Entry: leccion
    Entry -> ModuloExterno: Lección creada
    
    ' 3. Ejecutar lección
    ModuloExterno -> Entry: ejecutarLeccion(leccion, usuario)
    Entry -> Principal: ejecutarLeccion(leccion, usuario)
    Principal -> ModuloExterno: Lección iniciada
    
    ' 4. Completar lección
    ModuloExterno -> Entry: marcarLeccionCompletada(leccion, usuario, 4)
    Entry -> Principal: marcarLeccionCompletada(leccion, usuario, 4)
    Principal -> GestorProgreso: marcarLeccionCompletada(usuario, leccion, 4)
    
    ' 5. Calcular recompensas
    GestorProgreso -> GestorProgreso: calcularExperienciaGanada(leccion, 4)
    GestorProgreso -> GestorProgreso: calcularConocimientoGanado(leccion, 4)
    GestorProgreso -> Usuario: incrementarReputacion(puntos)
    
    ' 6. Actualizar progreso
    GestorProgreso -> Principal: Progreso actualizado
    Principal -> Leccion: setCompletada(true)
    Principal -> Entry: Lección completada
    Entry -> ModuloExterno: Progreso guardado
    
    ' 7. Consultar estadísticas
    ModuloExterno -> Entry: obtenerEstadisticasUsuario(usuario)
    Entry -> Principal: obtenerEstadisticasUsuario(usuario)
    Principal -> GestorProgreso: obtenerEstadisticasUsuario(usuario)
    GestorProgreso -> Principal: estadisticas
    Principal -> Entry: estadisticas
    Entry -> ModuloExterno: Estadísticas del usuario
    
end

' ===== FLUJO ALTERNATIVO: LECCIÓN DE PRUEBA =====
group "Flujo Alternativo: Lección de Prueba"
    
    ModuloExterno -> Entry: crearLeccionPrueba("Evaluación", ejercicios)
    Entry -> Principal: crearLeccion("Evaluación", ejercicios, PRUEBA, 30, 0)
    Principal -> Leccion: new Leccion(id, nombre, ejercicios, PRUEBA, 30, 0)
    Principal -> Entry: leccion
    Entry -> ModuloExterno: Lección de prueba creada
    
    ModuloExterno -> Entry: marcarLeccionCompletada(leccion, usuario, 3)
    Entry -> Principal: marcarLeccionCompletada(leccion, usuario, 3)
    Principal -> GestorProgreso: marcarLeccionCompletada(usuario, leccion, 3)
    GestorProgreso -> Principal: Progreso actualizado
    Principal -> Entry: Lección completada
    Entry -> ModuloExterno: Evaluación completada
    
end

' ===== FLUJO DE CONSULTA =====
group "Flujo de Consulta"
    
    ModuloExterno -> Entry: obtenerTodasLasLecciones()
    Entry -> Principal: obtenerTodasLasLecciones()
    Principal -> Entry: lista de lecciones
    Entry -> ModuloExterno: Lecciones disponibles
    
    ModuloExterno -> Entry: obtenerProgresoUsuario(leccion, usuario)
    Entry -> Principal: obtenerProgresoUsuario(leccion, usuario)
    Principal -> GestorProgreso: obtenerProgresoLeccion(usuario, leccion)
    GestorProgreso -> Principal: progreso
    Principal -> Entry: progreso
    Entry -> ModuloExterno: Progreso en lección
    
end

@enduml 