<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/GestionAprendizaje_Modulo/Controladores/ConfiguracionUsuarioService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/GestionAprendizaje_Modulo/Controladores/ConfiguracionUsuarioService.java" />
              <option name="originalContent" value="package GestionAprendizaje_Modulo.Controladores;&#10;&#10;import java.io.BufferedReader;&#10;import java.io.BufferedWriter;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.io.InputStreamReader;&#10;import java.nio.charset.StandardCharsets;&#10;import java.nio.file.Files;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * Servicio para manejar la configuración de usuarios (lenguaje, nivel, primera vez)&#10; */&#10;public class ConfiguracionUsuarioService {&#10;&#10;    private static final String ARCHIVO_CONFIGURACION = &quot;/GestionAprendizaje_Modulo/data/configuracion_usuarios.txt&quot;;&#10;    private static ConfiguracionUsuarioService instancia;&#10;&#10;    public static ConfiguracionUsuarioService getInstancia() {&#10;        if (instancia == null) {&#10;            instancia = new ConfiguracionUsuarioService();&#10;        }&#10;        return instancia;&#10;    }&#10;&#10;    public static class ConfiguracionUsuario {&#10;        private String username;&#10;        private String lenguaje;&#10;        private String nivel;&#10;        private boolean primeraVez;&#10;&#10;        public ConfiguracionUsuario(String username, String lenguaje, String nivel, boolean primeraVez) {&#10;            this.username = username;&#10;            this.lenguaje = lenguaje;&#10;            this.nivel = nivel;&#10;            this.primeraVez = primeraVez;&#10;        }&#10;&#10;        public String getUsername() { return username; }&#10;        public String getLenguaje() { return lenguaje; }&#10;        public String getNivel() { return nivel; }&#10;        public boolean isPrimeraVez() { return primeraVez; }&#10;&#10;        public void setPrimeraVez(boolean primeraVez) { this.primeraVez = primeraVez; }&#10;    }&#10;&#10;    public boolean usuarioTieneConfiguracion(String username) {&#10;        try {&#10;            List&lt;ConfiguracionUsuario&gt; configuraciones = leerConfiguraciones();&#10;            return configuraciones.stream().anyMatch(config -&gt; config.getUsername().equals(username));&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al verificar configuración del usuario: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public boolean esPrimeraVez(String username) {&#10;        try {&#10;            List&lt;ConfiguracionUsuario&gt; configuraciones = leerConfiguraciones();&#10;            for (ConfiguracionUsuario config : configuraciones) {&#10;                if (config.getUsername().equals(username)) {&#10;                    return config.isPrimeraVez();&#10;                }&#10;            }&#10;            return true;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al verificar primera vez del usuario: &quot; + e.getMessage());&#10;            return true;&#10;        }&#10;    }&#10;&#10;    public ConfiguracionUsuario obtenerConfiguracion(String username) {&#10;        try {&#10;            List&lt;ConfiguracionUsuario&gt; configuraciones = leerConfiguraciones();&#10;            for (ConfiguracionUsuario config : configuraciones) {&#10;                if (config.getUsername().equals(username)) {&#10;                    return config;&#10;                }&#10;            }&#10;            return null;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al obtener configuración del usuario: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    public void guardarConfiguracion(String username, String lenguaje, String nivel) {&#10;        try {&#10;            List&lt;ConfiguracionUsuario&gt; configuraciones = leerConfiguraciones();&#10;&#10;            int index = -1;&#10;            for (int i = 0; i &lt; configuraciones.size(); i++) {&#10;                if (configuraciones.get(i).getUsername().equals(username)) {&#10;                    index = i;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            ConfiguracionUsuario nueva = new ConfiguracionUsuario(username, lenguaje, nivel, false);&#10;            if (index &gt;= 0) {&#10;                configuraciones.set(index, nueva); // actualizar sin eliminar durante el foreach&#10;            } else {&#10;                configuraciones.add(nueva);&#10;            }&#10;&#10;            escribirConfiguraciones(configuraciones);&#10;            System.out.println(&quot;Configuración guardada para usuario: &quot; + username + &quot; - &quot; + lenguaje + &quot; - &quot; + nivel);&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al guardar configuración del usuario: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void marcarUsuarioNuevo(String username) {&#10;        try {&#10;            List&lt;ConfiguracionUsuario&gt; configuraciones = leerConfiguraciones();&#10;            boolean existe = configuraciones.stream().anyMatch(config -&gt; config.getUsername().equals(username));&#10;            if (!existe) {&#10;                configuraciones.add(new ConfiguracionUsuario(username, &quot;&quot;, &quot;&quot;, true));&#10;                escribirConfiguraciones(configuraciones);&#10;                System.out.println(&quot;Usuario marcado como nuevo: &quot; + username);&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al marcar usuario como nuevo: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private List&lt;ConfiguracionUsuario&gt; leerConfiguraciones() throws IOException {&#10;        List&lt;ConfiguracionUsuario&gt; configuraciones = new ArrayList&lt;&gt;();&#10;&#10;        String rutaCompleta = System.getProperty(&quot;user.dir&quot;) + &quot;/src/main/resources&quot; + ARCHIVO_CONFIGURACION;&#10;        Path path = Paths.get(rutaCompleta);&#10;&#10;        if (Files.exists(path)) {&#10;            try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {&#10;                String linea;&#10;                while ((linea = reader.readLine()) != null) {&#10;                    parsearLinea(configuraciones, linea);&#10;                }&#10;            }&#10;            return configuraciones;&#10;        }&#10;&#10;        // Fallback: intentar leer desde el classpath la primera vez&#10;        try (InputStream inputStream = getClass().getResourceAsStream(ARCHIVO_CONFIGURACION)) {&#10;            if (inputStream == null) {&#10;                System.out.println(&quot;Archivo de configuración no encontrado, se creará al guardar.&quot;);&#10;                return configuraciones;&#10;            }&#10;            try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {&#10;                String linea;&#10;                while ((linea = reader.readLine()) != null) {&#10;                    parsearLinea(configuraciones, linea);&#10;                }&#10;            }&#10;        }&#10;        return configuraciones;&#10;    }&#10;&#10;    private void parsearLinea(List&lt;ConfiguracionUsuario&gt; configuraciones, String linea) {&#10;        if (!linea.trim().isEmpty() &amp;&amp; !linea.startsWith(&quot;#&quot;)) {&#10;            String[] partes = linea.split(&quot;;&quot;);&#10;            if (partes.length == 4) {&#10;                String username = partes[0].trim();&#10;                String lenguaje = partes[1].trim();&#10;                String nivel = partes[2].trim();&#10;                boolean primeraVez = Boolean.parseBoolean(partes[3].trim());&#10;                configuraciones.add(new ConfiguracionUsuario(username, lenguaje, nivel, primeraVez));&#10;            }&#10;        }&#10;    }&#10;&#10;    private void escribirConfiguraciones(List&lt;ConfiguracionUsuario&gt; configuraciones) throws IOException {&#10;        String rutaCompleta = System.getProperty(&quot;user.dir&quot;) + &quot;/src/main/resources&quot; + ARCHIVO_CONFIGURACION;&#10;        Path path = Paths.get(rutaCompleta);&#10;        if (path.getParent() != null &amp;&amp; !Files.exists(path.getParent())) {&#10;            Files.createDirectories(path.getParent());&#10;        }&#10;&#10;        try (BufferedWriter writer = Files.newBufferedWriter(path, StandardCharsets.UTF_8)) {&#10;            writer.write(&quot;# Archivo de configuración de usuarios\n&quot;);&#10;            writer.write(&quot;# Formato: username;lenguaje;nivel;primeraVez\n&quot;);&#10;            writer.write(&quot;# primeraVez: true = necesita configuración inicial, false = ya configurado\n&quot;);&#10;&#10;            for (ConfiguracionUsuario config : configuraciones) {&#10;                writer.write(String.format(&quot;%s;%s;%s;%s\n&quot;,&#10;                        config.getUsername(),&#10;                        config.getLenguaje(),&#10;                        config.getNivel(),&#10;                        config.isPrimeraVez()));&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package GestionAprendizaje_Modulo.Controladores;&#10;&#10;import java.io.BufferedReader;&#10;import java.io.BufferedWriter;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.io.InputStreamReader;&#10;import java.nio.charset.StandardCharsets;&#10;import java.nio.file.Files;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;/**&#10; * Servicio para manejar la configuración de usuarios con múltiples lenguajes&#10; */&#10;public class ConfiguracionUsuarioService {&#10;&#10;    private static final String ARCHIVO_CONFIGURACION = &quot;/GestionAprendizaje_Modulo/data/configuracion_usuarios.txt&quot;;&#10;    private static ConfiguracionUsuarioService instancia;&#10;&#10;    public static ConfiguracionUsuarioService getInstancia() {&#10;        if (instancia == null) {&#10;            instancia = new ConfiguracionUsuarioService();&#10;        }&#10;        return instancia;&#10;    }&#10;&#10;    public static class ConfiguracionUsuario {&#10;        private String username;&#10;        private List&lt;String&gt; lenguajes;&#10;        private List&lt;String&gt; niveles;&#10;        private boolean primeraVez;&#10;&#10;        public ConfiguracionUsuario(String username, List&lt;String&gt; lenguajes, List&lt;String&gt; niveles, boolean primeraVez) {&#10;            this.username = username;&#10;            this.lenguajes = new ArrayList&lt;&gt;(lenguajes);&#10;            this.niveles = new ArrayList&lt;&gt;(niveles);&#10;            this.primeraVez = primeraVez;&#10;        }&#10;&#10;        // Constructor para un solo lenguaje (compatibilidad)&#10;        public ConfiguracionUsuario(String username, String lenguaje, String nivel, boolean primeraVez) {&#10;            this.username = username;&#10;            this.lenguajes = new ArrayList&lt;&gt;();&#10;            this.niveles = new ArrayList&lt;&gt;();&#10;            if (lenguaje != null &amp;&amp; !lenguaje.isEmpty()) {&#10;                this.lenguajes.add(lenguaje);&#10;                this.niveles.add(nivel);&#10;            }&#10;            this.primeraVez = primeraVez;&#10;        }&#10;&#10;        public String getUsername() { return username; }&#10;        public List&lt;String&gt; getLenguajes() { return lenguajes; }&#10;        public List&lt;String&gt; getNiveles() { return niveles; }&#10;        public boolean isPrimeraVez() { return primeraVez; }&#10;&#10;        // Métodos de compatibilidad para obtener el primer lenguaje/nivel&#10;        public String getLenguaje() {&#10;            return lenguajes.isEmpty() ? &quot;&quot; : lenguajes.get(0);&#10;        }&#10;        public String getNivel() {&#10;            return niveles.isEmpty() ? &quot;&quot; : niveles.get(0);&#10;        }&#10;&#10;        public void setPrimeraVez(boolean primeraVez) { this.primeraVez = primeraVez; }&#10;&#10;        public void agregarLenguaje(String lenguaje, String nivel) {&#10;            if (!lenguajes.contains(lenguaje)) {&#10;                lenguajes.add(lenguaje);&#10;                niveles.add(nivel);&#10;            }&#10;        }&#10;&#10;        public boolean tieneLinquaje(String lenguaje) {&#10;            return lenguajes.contains(lenguaje);&#10;        }&#10;&#10;        public String getNivelParaLenguaje(String lenguaje) {&#10;            int index = lenguajes.indexOf(lenguaje);&#10;            return index &gt;= 0 ? niveles.get(index) : &quot;&quot;;&#10;        }&#10;    }&#10;&#10;    public boolean usuarioTieneConfiguracion(String username) {&#10;        try {&#10;            List&lt;ConfiguracionUsuario&gt; configuraciones = leerConfiguraciones();&#10;            return configuraciones.stream().anyMatch(config -&gt; config.getUsername().equals(username));&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al verificar configuración del usuario: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public boolean esPrimeraVez(String username) {&#10;        try {&#10;            List&lt;ConfiguracionUsuario&gt; configuraciones = leerConfiguraciones();&#10;            for (ConfiguracionUsuario config : configuraciones) {&#10;                if (config.getUsername().equals(username)) {&#10;                    return config.isPrimeraVez();&#10;                }&#10;            }&#10;            return true;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al verificar primera vez del usuario: &quot; + e.getMessage());&#10;            return true;&#10;        }&#10;    }&#10;&#10;    public ConfiguracionUsuario obtenerConfiguracion(String username) {&#10;        try {&#10;            List&lt;ConfiguracionUsuario&gt; configuraciones = leerConfiguraciones();&#10;            for (ConfiguracionUsuario config : configuraciones) {&#10;                if (config.getUsername().equals(username)) {&#10;                    return config;&#10;                }&#10;            }&#10;            return null;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al obtener configuración del usuario: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    // Método para guardar un solo lenguaje (compatibilidad)&#10;    public void guardarConfiguracion(String username, String lenguaje, String nivel) {&#10;        List&lt;String&gt; lenguajes = Arrays.asList(lenguaje);&#10;        List&lt;String&gt; niveles = Arrays.asList(nivel);&#10;        guardarConfiguracionMultiple(username, lenguajes, niveles);&#10;    }&#10;&#10;    // Método principal para guardar múltiples lenguajes&#10;    public void guardarConfiguracionMultiple(String username, List&lt;String&gt; lenguajes, List&lt;String&gt; niveles) {&#10;        try {&#10;            List&lt;ConfiguracionUsuario&gt; configuraciones = leerConfiguraciones();&#10;&#10;            int index = -1;&#10;            for (int i = 0; i &lt; configuraciones.size(); i++) {&#10;                if (configuraciones.get(i).getUsername().equals(username)) {&#10;                    index = i;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            ConfiguracionUsuario nueva = new ConfiguracionUsuario(username, lenguajes, niveles, false);&#10;            if (index &gt;= 0) {&#10;                configuraciones.set(index, nueva);&#10;            } else {&#10;                configuraciones.add(nueva);&#10;            }&#10;&#10;            escribirConfiguraciones(configuraciones);&#10;            System.out.println(&quot;Configuración guardada para usuario: &quot; + username + &quot; - Lenguajes: &quot; + lenguajes + &quot; - Niveles: &quot; + niveles);&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al guardar configuración del usuario: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    // Nuevo método para AGREGAR lenguajes en lugar de reemplazarlos&#10;    public void agregarLenguajesAlUsuario(String username, List&lt;String&gt; nuevosLenguajes, List&lt;String&gt; nuevosNiveles) {&#10;        try {&#10;            ConfiguracionUsuario configExistente = obtenerConfiguracion(username);&#10;&#10;            List&lt;String&gt; lenguajesFinales = new ArrayList&lt;&gt;();&#10;            List&lt;String&gt; nivelesFinales = new ArrayList&lt;&gt;();&#10;&#10;            // Si el usuario ya tiene configuración, combinar con los nuevos&#10;            if (configExistente != null) {&#10;                lenguajesFinales.addAll(configExistente.getLenguajes());&#10;                nivelesFinales.addAll(configExistente.getNiveles());&#10;            }&#10;&#10;            // Agregar solo los lenguajes que no existen ya&#10;            for (int i = 0; i &lt; nuevosLenguajes.size(); i++) {&#10;                String nuevoLenguaje = nuevosLenguajes.get(i);&#10;                String nuevoNivel = i &lt; nuevosNiveles.size() ? nuevosNiveles.get(i) : &quot;Básico&quot;;&#10;&#10;                if (!lenguajesFinales.contains(nuevoLenguaje)) {&#10;                    lenguajesFinales.add(nuevoLenguaje);&#10;                    nivelesFinales.add(nuevoNivel);&#10;                } else {&#10;                    // Si el lenguaje ya existe, actualizar solo el nivel&#10;                    int indexExistente = lenguajesFinales.indexOf(nuevoLenguaje);&#10;                    nivelesFinales.set(indexExistente, nuevoNivel);&#10;                }&#10;            }&#10;&#10;            // Guardar la configuración combinada&#10;            guardarConfiguracionMultiple(username, lenguajesFinales, nivelesFinales);&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al agregar lenguajes al usuario: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void marcarUsuarioNuevo(String username) {&#10;        try {&#10;            List&lt;ConfiguracionUsuario&gt; configuraciones = leerConfiguraciones();&#10;            boolean existe = configuraciones.stream().anyMatch(config -&gt; config.getUsername().equals(username));&#10;            if (!existe) {&#10;                configuraciones.add(new ConfiguracionUsuario(username, new ArrayList&lt;&gt;(), new ArrayList&lt;&gt;(), true));&#10;                escribirConfiguraciones(configuraciones);&#10;                System.out.println(&quot;Usuario marcado como nuevo: &quot; + username);&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al marcar usuario como nuevo: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private List&lt;ConfiguracionUsuario&gt; leerConfiguraciones() throws IOException {&#10;        List&lt;ConfiguracionUsuario&gt; configuraciones = new ArrayList&lt;&gt;();&#10;&#10;        String rutaCompleta = System.getProperty(&quot;user.dir&quot;) + &quot;/src/main/resources&quot; + ARCHIVO_CONFIGURACION;&#10;        Path path = Paths.get(rutaCompleta);&#10;&#10;        if (Files.exists(path)) {&#10;            try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {&#10;                String linea;&#10;                while ((linea = reader.readLine()) != null) {&#10;                    parsearLinea(configuraciones, linea);&#10;                }&#10;            }&#10;            return configuraciones;&#10;        }&#10;&#10;        // Fallback: intentar leer desde el classpath&#10;        try (InputStream inputStream = getClass().getResourceAsStream(ARCHIVO_CONFIGURACION)) {&#10;            if (inputStream == null) {&#10;                System.out.println(&quot;Archivo de configuración no encontrado, se creará al guardar.&quot;);&#10;                return configuraciones;&#10;            }&#10;            try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {&#10;                String linea;&#10;                while ((linea = reader.readLine()) != null) {&#10;                    parsearLinea(configuraciones, linea);&#10;                }&#10;            }&#10;        }&#10;        return configuraciones;&#10;    }&#10;&#10;    private void parsearLinea(List&lt;ConfiguracionUsuario&gt; configuraciones, String linea) {&#10;        if (!linea.trim().isEmpty() &amp;&amp; !linea.startsWith(&quot;#&quot;)) {&#10;            String[] partes = linea.split(&quot;;&quot;);&#10;            if (partes.length == 4) {&#10;                String username = partes[0].trim();&#10;&#10;                // Parsear lenguajes (separados por comas)&#10;                List&lt;String&gt; lenguajes = new ArrayList&lt;&gt;();&#10;                if (!partes[1].trim().isEmpty()) {&#10;                    String[] lenguajesArray = partes[1].split(&quot;,&quot;);&#10;                    for (String lang : lenguajesArray) {&#10;                        lenguajes.add(lang.trim());&#10;                    }&#10;                }&#10;&#10;                // Parsear niveles (separados por comas, en el mismo orden que los lenguajes)&#10;                List&lt;String&gt; niveles = new ArrayList&lt;&gt;();&#10;                if (!partes[2].trim().isEmpty()) {&#10;                    String[] nivelesArray = partes[2].split(&quot;,&quot;);&#10;                    for (String nivel : nivelesArray) {&#10;                        niveles.add(nivel.trim());&#10;                    }&#10;                }&#10;&#10;                boolean primeraVez = Boolean.parseBoolean(partes[3].trim());&#10;                configuraciones.add(new ConfiguracionUsuario(username, lenguajes, niveles, primeraVez));&#10;            }&#10;        }&#10;    }&#10;&#10;    private void escribirConfiguraciones(List&lt;ConfiguracionUsuario&gt; configuraciones) throws IOException {&#10;        String rutaCompleta = System.getProperty(&quot;user.dir&quot;) + &quot;/src/main/resources&quot; + ARCHIVO_CONFIGURACION;&#10;        Path path = Paths.get(rutaCompleta);&#10;        if (path.getParent() != null &amp;&amp; !Files.exists(path.getParent())) {&#10;            Files.createDirectories(path.getParent());&#10;        }&#10;&#10;        try (BufferedWriter writer = Files.newBufferedWriter(path, StandardCharsets.UTF_8)) {&#10;            writer.write(&quot;# Archivo de configuración de usuarios\n&quot;);&#10;            writer.write(&quot;# Formato: username;lenguajes;niveles;primeraVez\n&quot;);&#10;            writer.write(&quot;# lenguajes: separados por comas (Java,Python,C)\n&quot;);&#10;            writer.write(&quot;# niveles: separados por comas en el mismo orden que los lenguajes (Básico,Intermedio,Avanzado)\n&quot;);&#10;            writer.write(&quot;# primeraVez: true = necesita configuración inicial, false = ya configurado\n&quot;);&#10;&#10;            for (ConfiguracionUsuario config : configuraciones) {&#10;                String lenguajesStr = String.join(&quot;,&quot;, config.getLenguajes());&#10;                String nivelesStr = String.join(&quot;,&quot;, config.getNiveles());&#10;&#10;                writer.write(String.format(&quot;%s;%s;%s;%s\n&quot;,&#10;                        config.getUsername(),&#10;                        lenguajesStr,&#10;                        nivelesStr,&#10;                        config.isPrimeraVez()));&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/GestionAprendizaje_Modulo/Controladores/CursosController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/GestionAprendizaje_Modulo/Controladores/CursosController.java" />
              <option name="originalContent" value="package GestionAprendizaje_Modulo.Controladores;&#10;&#10;import java.io.IOException;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.layout.AnchorPane;&#10;import javafx.stage.Stage;&#10;&#10;public class CursosController {&#10;&#10;    @FXML&#10;    private Label tituloLenguajeLabel;&#10;&#10;    @FXML&#10;    private Button btnJava;&#10;    @FXML&#10;    private Button btnPython;&#10;    @FXML&#10;    private Button btnPhp;&#10;    @FXML&#10;    private Button btnCplusplus;&#10;&#10;    @FXML&#10;    private Button btnVolver;&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        // Acción para el botón de &quot;Volver&quot;&#10;        btnVolver.setOnAction(event -&gt; {&#10;            try {&#10;                // Cargar el archivo FXML de la vista HomeUsuario (siempre volver al home)&#10;                FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/Modulo_Usuario/views/homeUsuario.fxml&quot;));&#10;                AnchorPane homePane = loader.load(); // Cargar la vista de home&#10;&#10;                // Obtener el stage actual y cambiar la escena&#10;                Stage stage = (Stage) btnVolver.getScene().getWindow();&#10;                stage.setScene(new Scene(homePane)); // Cambiar la escena&#10;                stage.show(); // Mostrar la nueva escena&#10;            } catch (IOException e) {&#10;                e.printStackTrace(); // Mostrar el error si algo falla&#10;            }&#10;        });&#10;&#10;        // Lógica para el botón Java&#10;        btnJava.setOnAction(event -&gt; {&#10;            abrirDiagnostico(&quot;Java&quot;);&#10;        });&#10;&#10;        // Lógica para el botón Python&#10;        btnPython.setOnAction(event -&gt; {&#10;            abrirDiagnostico(&quot;Python&quot;);&#10;        });&#10;&#10;        // Lógica para el botón PHP&#10;        btnPhp.setOnAction(event -&gt; {&#10;            abrirDiagnostico(&quot;PHP&quot;);&#10;        });&#10;&#10;        // Lógica para el botón C++&#10;        btnCplusplus.setOnAction(event -&gt; {&#10;            abrirDiagnostico(&quot;C&quot;);&#10;        });&#10;    }&#10;&#10;    private void abrirDiagnostico(String lenguaje) {&#10;        try {&#10;            // Cargar el archivo FXML de la vista Diagnóstico&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/Diagnostico.fxml&quot;));&#10;            AnchorPane diagnosticoPane = loader.load();  // Cargar el contenido de la vista Diagnóstico&#10;&#10;            // Obtener el controlador de la vista Diagnóstico&#10;            DiagnosticoController diagnosticoController = loader.getController();&#10;            diagnosticoController.setDiagnosticoText(lenguaje); // Pasar el nombre del lenguaje al controlador&#10;&#10;            // Obtener el stage actual y cambiar la escena&#10;            Stage stage = (Stage) btnJava.getScene().getWindow(); // Usamos cualquier botón para obtener el Stage&#10;            stage.setScene(new Scene(diagnosticoPane));  // Cambiar la escena&#10;            stage.show();  // Mostrar la nueva escena&#10;        } catch (IOException e) {&#10;            e.printStackTrace();  // Mostrar error si falla al cargar el FXML&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package GestionAprendizaje_Modulo.Controladores;&#10;&#10;import java.io.IOException;&#10;&#10;import Conexion.SesionManager;&#10;import Modulo_Usuario.Clases.Usuario;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.Alert;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.layout.AnchorPane;&#10;import javafx.stage.Stage;&#10;&#10;public class CursosController {&#10;&#10;    @FXML&#10;    private Label tituloLenguajeLabel;&#10;&#10;    @FXML&#10;    private Button btnJava;&#10;    @FXML&#10;    private Button btnPython;&#10;    @FXML&#10;    private Button btnPhp;&#10;    @FXML&#10;    private Button btnCplusplus;&#10;&#10;    @FXML&#10;    private Button btnVolver;&#10;&#10;    @FXML&#10;    private Button btnSeleccionMultiple;&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        // Acción para el botón de &quot;Volver&quot;&#10;        btnVolver.setOnAction(event -&gt; {&#10;            try {&#10;                // Cargar el archivo FXML de la vista HomeUsuario (siempre volver al home)&#10;                FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/Modulo_Usuario/views/homeUsuario.fxml&quot;));&#10;                AnchorPane homePane = loader.load(); // Cargar la vista de home&#10;&#10;                // Obtener el stage actual y cambiar la escena&#10;                Stage stage = (Stage) btnVolver.getScene().getWindow();&#10;                stage.setScene(new Scene(homePane)); // Cambiar la escena&#10;                stage.show(); // Mostrar la nueva escena&#10;            } catch (IOException e) {&#10;                e.printStackTrace(); // Mostrar el error si algo falla&#10;            }&#10;        });&#10;&#10;        // Configurar el botón de selección múltiple&#10;        btnSeleccionMultiple.setOnAction(event -&gt; {&#10;            try {&#10;                FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/SeleccionMultipleLenguajes.fxml&quot;));&#10;                AnchorPane seleccionPane = loader.load();&#10;                Stage stage = (Stage) btnSeleccionMultiple.getScene().getWindow();&#10;                stage.setScene(new Scene(seleccionPane));&#10;                stage.show();&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;&#10;        // Lógica para el botón Java&#10;        btnJava.setOnAction(event -&gt; {&#10;            abrirDiagnostico(&quot;Java&quot;);&#10;        });&#10;&#10;        // Lógica para el botón Python&#10;        btnPython.setOnAction(event -&gt; {&#10;            abrirDiagnostico(&quot;Python&quot;);&#10;        });&#10;&#10;        // Lógica para el botón PHP&#10;        btnPhp.setOnAction(event -&gt; {&#10;            abrirDiagnostico(&quot;PHP&quot;);&#10;        });&#10;&#10;        // Lógica para el botón C++&#10;        btnCplusplus.setOnAction(event -&gt; {&#10;            abrirDiagnostico(&quot;C&quot;);&#10;        });&#10;    }&#10;&#10;    private void abrirDiagnostico(String lenguaje) {&#10;        try {&#10;            // NUEVA VALIDACIÓN: Verificar si el usuario ya tiene este lenguaje configurado&#10;            Usuario usuarioActual = SesionManager.getInstancia().getUsuarioAutenticado();&#10;            if (usuarioActual != null) {&#10;                ConfiguracionUsuarioService.ConfiguracionUsuario config =&#10;                    ConfiguracionUsuarioService.getInstancia().obtenerConfiguracion(usuarioActual.getUsername());&#10;&#10;                if (config != null &amp;&amp; config.tieneLinquaje(lenguaje)) {&#10;                    // Mostrar alerta y no permitir continuar&#10;                    Alert alerta = new Alert(Alert.AlertType.WARNING);&#10;                    alerta.setTitle(&quot;Lenguaje ya configurado&quot;);&#10;                    alerta.setHeaderText(&quot;¡Ya tienes este lenguaje!&quot;);&#10;                    alerta.setContentText(&quot;Ya tienes &quot; + lenguaje + &quot; configurado en tu perfil. &quot; +&#10;                                        &quot;Puedes acceder a él desde la vista 'Mis Lenguajes' usando el botón .&quot;);&#10;                    alerta.showAndWait();&#10;                    return; // No continuar con el diagnóstico&#10;                }&#10;            }&#10;&#10;            // Cargar el archivo FXML de la vista Diagnóstico&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/Diagnostico.fxml&quot;));&#10;            AnchorPane diagnosticoPane = loader.load();  // Cargar el contenido de la vista Diagnóstico&#10;&#10;            // Obtener el controlador de la vista Diagnóstico&#10;            DiagnosticoController diagnosticoController = loader.getController();&#10;            diagnosticoController.setDiagnosticoText(lenguaje); // Pasar el nombre del lenguaje al controlador&#10;&#10;            // Obtener el stage actual y cambiar la escena&#10;            Stage stage = (Stage) btnJava.getScene().getWindow(); // Usamos cualquier botón para obtener el Stage&#10;            stage.setScene(new Scene(diagnosticoPane));  // Cambiar la escena&#10;            stage.show();  // Mostrar la nueva escena&#10;        } catch (IOException e) {&#10;            e.printStackTrace();  // Mostrar error si falla al cargar el FXML&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/GestionAprendizaje_Modulo/Controladores/MisLenguajesController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/GestionAprendizaje_Modulo/Controladores/MisLenguajesController.java" />
              <option name="updatedContent" value="package GestionAprendizaje_Modulo.Controladores;&#10;&#10;import java.io.IOException;&#10;import java.util.List;&#10;&#10;import Conexion.MetodosFrecuentes;&#10;import Conexion.SesionManager;&#10;import Modulo_Usuario.Clases.Usuario;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.layout.AnchorPane;&#10;import javafx.scene.layout.VBox;&#10;import javafx.stage.Stage;&#10;&#10;public class MisLenguajesController {&#10;&#10;    @FXML private VBox lenguajesContainer;&#10;    @FXML private AnchorPane rootPane;&#10;    @FXML private Button btnAtras;&#10;    @FXML private Button btnHome;&#10;    @FXML private Button btnAdd;&#10;    @FXML private Button btnLibrary;&#10;&#10;    private Usuario usuarioActual;&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        // Obtener el usuario actual&#10;        this.usuarioActual = SesionManager.getInstancia().getUsuarioAutenticado();&#10;        &#10;        if (usuarioActual == null) {&#10;            Label errorLabel = new Label(&quot;Error: No hay usuario en sesión&quot;);&#10;            errorLabel.setStyle(&quot;-fx-text-fill: white; -fx-font-size: 16px;&quot;);&#10;            lenguajesContainer.getChildren().add(errorLabel);&#10;            return;&#10;        }&#10;&#10;        cargarLenguajesDelUsuario();&#10;        configurarBotones();&#10;    }&#10;&#10;    private void cargarLenguajesDelUsuario() {&#10;        // Obtener la configuración del usuario&#10;        ConfiguracionUsuarioService.ConfiguracionUsuario config = &#10;            ConfiguracionUsuarioService.getInstancia().obtenerConfiguracion(usuarioActual.getUsername());&#10;&#10;        if (config == null || config.getLenguajes().isEmpty()) {&#10;            Label noLenguajesLabel = new Label(&quot;No tienes lenguajes configurados aún&quot;);&#10;            noLenguajesLabel.setStyle(&quot;-fx-text-fill: #A6B1E1; -fx-font-size: 16px; -fx-padding: 20;&quot;);&#10;            lenguajesContainer.getChildren().add(noLenguajesLabel);&#10;            return;&#10;        }&#10;&#10;        List&lt;String&gt; lenguajes = config.getLenguajes();&#10;        List&lt;String&gt; niveles = config.getNiveles();&#10;&#10;        // Crear una tarjeta para cada lenguaje&#10;        for (int i = 0; i &lt; lenguajes.size(); i++) {&#10;            String lenguaje = lenguajes.get(i);&#10;            String nivel = i &lt; niveles.size() ? niveles.get(i) : &quot;Básico&quot;;&#10;            &#10;            VBox tarjetaLenguaje = crearTarjetaLenguaje(lenguaje, nivel);&#10;            lenguajesContainer.getChildren().add(tarjetaLenguaje);&#10;        }&#10;    }&#10;&#10;    private VBox crearTarjetaLenguaje(String lenguaje, String nivel) {&#10;        VBox tarjeta = new VBox(10);&#10;        tarjeta.setStyle(&quot;-fx-padding: 20; -fx-background-color: #FFFFFF1A; -fx-background-radius: 15; -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.2), 8, 0, 0, 4);&quot;);&#10;&#10;        // Título del lenguaje&#10;        Label tituloLenguaje = new Label(lenguaje);&#10;        tituloLenguaje.setStyle(&quot;-fx-text-fill: white; -fx-font-size: 24px; -fx-font-weight: bold;&quot;);&#10;&#10;        // Nivel&#10;        Label nivelLabel = new Label(&quot;Nivel: &quot; + nivel);&#10;        nivelLabel.setStyle(&quot;-fx-text-fill: #A6B1E1; -fx-font-size: 16px;&quot;);&#10;&#10;        // Botón para acceder a la ruta&#10;        Button btnAccederRuta = new Button(&quot; Acceder a la Ruta&quot;);&#10;        btnAccederRuta.setStyle(&quot;-fx-background-color: #5A9BD5; -fx-text-fill: white; -fx-font-size: 14px; -fx-font-weight: bold; -fx-background-radius: 20px; -fx-cursor: hand; -fx-padding: 10 20;&quot;);&#10;        &#10;        btnAccederRuta.setOnAction(event -&gt; {&#10;            // Establecer el lenguaje seleccionado en el DiagnosticoController&#10;            DiagnosticoController.lenguajeSeleccionado = lenguaje;&#10;            DiagnosticoController.nivelSeleccionado = nivel;&#10;            &#10;            // Ir a la vista de Ruta&#10;            try {&#10;                FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/Ruta.fxml&quot;));&#10;                AnchorPane rutaPane = loader.load();&#10;                Stage stage = (Stage) rootPane.getScene().getWindow();&#10;                stage.setScene(new Scene(rutaPane));&#10;                stage.show();&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;&#10;        tarjeta.getChildren().addAll(tituloLenguaje, nivelLabel, btnAccederRuta);&#10;        return tarjeta;&#10;    }&#10;&#10;    private void configurarBotones() {&#10;        // Botón Atrás&#10;        btnAtras.setOnAction(event -&gt; {&#10;            try {&#10;                MetodosFrecuentes.cambiarVentana((Stage) rootPane.getScene().getWindow(), &quot;/Modulo_Usuario/views/homeUsuario.fxml&quot;, &quot;Home Usuario&quot;);&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;&#10;        // Botón Home&#10;        btnHome.setOnAction(event -&gt; {&#10;            try {&#10;                MetodosFrecuentes.cambiarVentana((Stage) rootPane.getScene().getWindow(), &quot;/Modulo_Usuario/views/homeUsuario.fxml&quot;, &quot;Home Usuario&quot;);&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;&#10;        // Botón Add&#10;        btnAdd.setOnAction(event -&gt; {&#10;            try {&#10;                FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/Cursos.fxml&quot;));&#10;                AnchorPane cursosPane = loader.load();&#10;                Stage stage = (Stage) rootPane.getScene().getWindow();&#10;                stage.setScene(new Scene(cursosPane));&#10;                stage.show();&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;&#10;        // Botón Library (mostrar esta misma vista)&#10;        btnLibrary.setOnAction(event -&gt; {&#10;            // Ya estamos en la vista de biblioteca, no hacer nada o recargar&#10;            cargarLenguajesDelUsuario();&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/GestionAprendizaje_Modulo/Controladores/RutaController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/GestionAprendizaje_Modulo/Controladores/RutaController.java" />
              <option name="originalContent" value="//package GestionAprendizaje_Modulo.Controladores;&#10;//&#10;//import java.io.IOException;&#10;//import java.util.List;&#10;//&#10;//import GestionAprendizaje_Modulo.Logica.AprendizajeManager;&#10;//import GestionAprendizaje_Modulo.Logica.Curso;&#10;//import GestionAprendizaje_Modulo.Logica.NodoRuta;&#10;//import GestionAprendizaje_Modulo.Logica.Ruta;&#10;//import MetodosGlobales.MetodosFrecuentes;&#10;//import MetodosGlobales.SesionManager;&#10;//import Modulo_Usuario.Clases.Usuario;&#10;//import Nuevo_Modulo_Leccion.controllers.LeccionUIController;&#10;//import javafx.fxml.FXML;&#10;//import javafx.fxml.FXMLLoader;&#10;//import javafx.scene.control.Button;&#10;//import javafx.scene.control.Label;&#10;//import javafx.scene.control.Tooltip;&#10;//import javafx.scene.layout.AnchorPane;&#10;//import javafx.scene.layout.Pane;&#10;//import javafx.stage.Stage;&#10;//&#10;///**&#10;// * =================================================================================&#10;// * Controlador de la Vi&#9;sta de Ruta - Versión Final con Progreso de Usuario&#10;// * =================================================================================&#10;// * Este controlador es la capa de VISTA (presentación) de la ruta de aprendizaje.&#10;// * Es consciente del usuario logueado y muestra su progreso individual,&#10;// * permitiéndole interactuar con las lecciones y guardando su avance.&#10;// */&#10;//public class RutaController {&#10;//&#10;//    @FXML private Pane nodoContainer;    // El panel del FXML donde se dibujarán los nodos.&#10;//    @FXML private AnchorPane rootPane;   // El panel raíz de la ventana, para obtener el Stage.&#10;//    @FXML private Label tituloLenguajeLabel; // El label para mostrar el título de la ruta.&#10;//&#10;//    // Botones de la parte superior&#10;//    @FXML private Button btnRecursos;&#10;//&#10;//    // Botones de la barra inferior&#10;//    @FXML private Button btnHome;&#10;//    @FXML private Button btnAdd;&#10;//    @FXML private Button btnLibrary;&#10;//&#10;//    /**&#10;//     * Atributo para mantener una referencia al usuario que está usando la pantalla.&#10;//     * Se obtiene del SesionManager al iniciar.&#10;//     */&#10;//    private Usuario usuarioActual;&#10;//&#10;//    /**&#10;//     * El método initialize se ejecuta automáticamente después de que el FXML ha sido cargado.&#10;//     * Es el punto de partida para construir la vista dinámica.&#10;//     */&#10;//    @FXML&#10;//    private void initialize() {&#10;//        System.out.println(&quot;[RutaController] Inicializando...&quot;);&#10;//        System.out.println(&quot;[RutaController] Inicializando...&quot;);&#10;//&#10;//        // Configuración de la acción del botón 'Recursos'&#10;//        btnRecursos.setOnAction(event -&gt; {&#10;//            System.out.println(&quot;Botón de Recursos presionado&quot;);&#10;//            abrirRecursos();  // Llamar al método para manejar la acción&#10;//        });&#10;//&#10;//        // --- ¡ACCIÓN CLAVE! LA CARGA DE DATOS SE INICIA AQUÍ ---&#10;//        try {&#10;//            // 1. Llamamos al manager para que construya toda la estructura de datos.&#10;//            AprendizajeManager.getInstancia().construirDatosDePrueba();&#10;//        } catch (Exception e) {&#10;//            System.err.println(&quot;!!! ERROR FATAL DURANTE LA CONSTRUCCIÓN DE DATOS en RutaController !!!&quot;);&#10;//            e.printStackTrace();&#10;//            // Mostrar un mensaje de error en la UI&#10;//            tituloLenguajeLabel.setText(&quot;Error al cargar datos&quot;);&#10;//            return; // Detener si la construcción falla.&#10;//        }&#10;//        // 1. OBTENER EL USUARIO ACTUAL DE LA SESIÓN&#10;//        this.usuarioActual = SesionManager.getInstancia().getUsuarioAutenticado();&#10;//&#10;//        // Comprobación de seguridad: si no hay un usuario logueado, la funcionalidad&#10;//        // de progreso no funcionará. Es crucial manejar este caso.&#10;//        if (usuarioActual == null) {&#10;//            System.err.println(&quot;[RutaController] ¡ERROR CRÍTICO! No hay ningún usuario en la sesión. No se puede mostrar ni guardar el progreso.&quot;);&#10;//            tituloLenguajeLabel.setText(&quot;Usuario Desconocido&quot;);&#10;//            // En una aplicación real, aquí podrías redirigir a la pantalla de login.&#10;//            return;&#10;//        }&#10;//        System.out.println(&quot;[RutaController] Vista cargada para el usuario: &quot; + usuarioActual.getUsername());&#10;//&#10;//        // 2. OBTENER LA ESTRUCTURA DE LA RUTA (la &quot;plantilla&quot;)&#10;//        // Se asume que AprendizajeManager ya fue inicializado al arrancar la app.&#10;//        List&lt;Curso&gt; cursos = AprendizajeManager.getInstancia().getCursos();&#10;//&#10;//        if (cursos.isEmpty() || cursos.get(0).getRutas().isEmpty()) {&#10;//            System.err.println(&quot;[RutaController] No hay cursos o rutas disponibles en el Manager.&quot;);&#10;//            return;&#10;//        }&#10;//&#10;//        // Para esta demo, mostramos la primera ruta del primer curso.&#10;//        Ruta ruta = cursos.get(0).getRutas().get(0);&#10;//        tituloLenguajeLabel.setText(ruta.getNombre()); // Actualizar el título de la vista&#10;//&#10;//        // 3. DIBUJAR LA VISTA, AHORA CONSCIENTE DEL PROGRESO DEL USUARIO&#10;//        construirNodosVisuales(ruta.getNodos());&#10;//&#10;//        // Vincular los botones con sus respectivas acciones&#10;//        configurarBotones();&#10;//    }&#10;//&#10;//    // Función para configurar los botones de la barra inferior&#10;//    private void configurarBotones() {&#10;//        // Acción para el botón Home&#10;//        btnHome.setOnAction(event -&gt; {&#10;//            try {&#10;//                // Cargar el archivo FXML de la vista HomeUsuario&#10;//                FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/Modulo_Usuario/views/homeUsuario.fxml&quot;));&#10;//                AnchorPane homePane = loader.load(); // Cargar el contenido del archivo FXML&#10;//&#10;//                // Obtener el stage actual y cambiar la escena&#10;//                Stage stage = (Stage) rootPane.getScene().getWindow();&#10;//                stage.setScene(new javafx.scene.Scene(homePane)); // Cambiar la escena por la nueva vista&#10;//                stage.show(); // Mostrar la nueva escena&#10;//            } catch (IOException e) {&#10;//                e.printStackTrace();&#10;//            }&#10;//        });&#10;//&#10;//        // Acción para el botón Add&#10;//        btnAdd.setOnAction(event -&gt; {&#10;//            try {&#10;//                // Cargar el archivo FXML de la vista HomeUsuario&#10;//                FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/Cursos.fxml&quot;));&#10;//                AnchorPane cursos = loader.load(); // Cargar el contenido del archivo FXML&#10;//&#10;//                // Obtener el stage actual y cambiar la escena&#10;//                Stage stage = (Stage) rootPane.getScene().getWindow();&#10;//                stage.setScene(new javafx.scene.Scene(cursos)); // Cambiar la escena por la nueva vista&#10;//                stage.show(); // Mostrar la nueva escena&#10;//            } catch (IOException e) {&#10;//                e.printStackTrace();&#10;//            }&#10;//        });&#10;//&#10;//        // Acción para el botón Library&#10;//        btnLibrary.setOnAction(event -&gt; {&#10;//            System.out.println(&quot;Library button clicked!&quot;);&#10;//            // Aquí puedes agregar la acción para el botón de &quot;&quot;.&#10;//            // Ejemplo: Navegar a una vista de biblioteca o recursos&#10;//        });&#10;//    }&#10;//&#10;//    /**&#10;//     * Dibuja los &quot;noditos&quot; en la pantalla, comprobando el progreso del usuario para cada uno.&#10;//     * @param nodosDeLaRuta La lista de objetos NodoRuta que componen la ruta &quot;plantilla&quot;.&#10;//     */&#10;//    private void construirNodosVisuales(List&lt;NodoRuta&gt; nodosDeLaRuta) {&#10;//        // Limpiamos el contenedor antes de (re)dibujar para evitar duplicados al actualizar.&#10;//        nodoContainer.getChildren().clear();&#10;//&#10;//        // Coordenadas (X, Y) para cada nodo.&#10;//        double[][] posiciones = {&#10;//                {50, 50}, {150, 120}, {80, 200}, {200, 280}, {120, 360},&#10;//                {300, 100}, {400, 180}, {500, 260}, {350, 330}, {600, 400}  // Agregamos más posiciones&#10;//        };&#10;//&#10;//&#10;//        System.out.println(&quot;[RutaController] Dibujando &quot; + nodosDeLaRuta.size() + &quot; nodos para el usuario &quot; + usuarioActual.getUsername());&#10;//&#10;//        for (NodoRuta nodo : nodosDeLaRuta) {&#10;//            if (nodo.getOrden() &gt; posiciones.length) break;&#10;//&#10;//            Button boton = new Button(&quot;L&quot; + nodo.getOrden());&#10;//&#10;//            // --- LÓGICA DE VISUALIZACIÓN DE PROGRESO ---&#10;//            // Le preguntamos al Manager si el USUARIO ACTUAL ha completado ESTE nodo.&#10;//            boolean estaCompletado = AprendizajeManager.getInstancia().isNodoCompletadoParaUsuario(usuarioActual, nodo);&#10;//&#10;//            // Aplicamos un estilo diferente si el nodo está completado.&#10;//            if (estaCompletado) {&#10;//                // Estilo para nodo completado (ej. azul)&#10;//                boton.setStyle(&quot;-fx-background-color: #3498DB; -fx-text-fill: white; -fx-font-size: 16px; -fx-font-weight: bold; -fx-background-radius: 50%; -fx-min-width: 40px; -fx-min-height: 40px; -fx-max-width: 40px; -fx-max-height: 40px; -fx-cursor: hand;&quot;);&#10;//                boton.setTooltip(new Tooltip(&quot;Lección COMPLETADA&quot;));&#10;//            } else {&#10;//                // Estilo para nodo pendiente (ej. verde)&#10;//                boton.setStyle(&quot;-fx-background-color: #50C878; -fx-text-fill: white; -fx-font-size: 16px; -fx-font-weight: bold; -fx-background-radius: 50%; -fx-min-width: 40px; -fx-min-height: 40px; -fx-max-width: 40px; -fx-max-height: 40px; -fx-cursor: hand;&quot;);&#10;//                boton.setTooltip(new Tooltip(&quot;Lección con &quot; + nodo.getLeccion().getNumEjercicios() + &quot; ejercicios&quot;));&#10;//            }&#10;//&#10;//            boton.setLayoutX(posiciones[nodo.getOrden() - 1][0]);&#10;//            boton.setLayoutY(posiciones[nodo.getOrden() - 1][1]);&#10;//&#10;//            // Guardamos el objeto NODO completo en el botón para tener acceso a su ID y Leccion.&#10;//            boton.setUserData(nodo);&#10;//&#10;//            // --- LÓGICA DE CLIC CON GUARDADO DE PROGRESO ---&#10;//            boton.setOnAction(event -&gt; {&#10;//                NodoRuta nodoClicado = (NodoRuta) ((Button) event.getSource()).getUserData();&#10;//&#10;//                // Abrimos la ventana de la lección del otro módulo.&#10;//                Stage stage = (Stage) rootPane.getScene().getWindow();&#10;//                LeccionUIController.mostrarUnaLeccion(nodoClicado.getLeccion(), stage, &quot;/GestionAprendizaje_Modulo/Vistas/Ruta.fxml&quot;);&#10;//&#10;//                // ¡ACCIÓN CLAVE! Marcamos el nodo como completado PARA EL USUARIO ACTUAL.&#10;//                // Esto guardará el progreso en la memoria del AprendizajeManager.&#10;//                AprendizajeManager.getInstancia().marcarNodoComoCompletado(usuarioActual, nodoClicado);&#10;//&#10;//                // Volvemos a dibujar toda la ruta para que el cambio de color sea instantáneo.&#10;//                construirNodosVisuales(nodosDeLaRuta);&#10;//            });&#10;//&#10;//            nodoContainer.getChildren().add(boton);&#10;//        }&#10;//    }&#10;//&#10;//    @FXML&#10;//    private void manejarAtras() {&#10;//        MetodosFrecuentes.cambiarVentana((Stage) rootPane.getScene().getWindow(), &quot;/Modulo_Usuario/views/homeUsuario.fxml&quot;, &quot;Perfil de Usuario&quot;);&#10;//&#10;//    }&#10;//&#10;//    private void abrirRecursos() {&#10;//        try {&#10;//            // Cargar el archivo FXML de la vista de recursos&#10;//            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/Recursos.fxml&quot;));&#10;//            AnchorPane recursosPane = loader.load();  // Cargar el contenido de la vista de recursos&#10;//&#10;//            // Cambiar la escena en el Stage actual&#10;//            Stage stage = (Stage) rootPane.getScene().getWindow();&#10;//            stage.getScene().setRoot(recursosPane); // Cambiar la escena al nuevo panel&#10;//        } catch (IOException e) {&#10;//            e.printStackTrace();  // Mostrar error si algo falla al cargar el FXML&#10;//        }&#10;//    }&#10;//}&#10;&#10;//package GestionAprendizaje_Modulo.Controladores;&#10;//&#10;//import GestionAprendizaje_Modulo.Logica.AprendizajeManager;&#10;//import GestionAprendizaje_Modulo.Logica.NodoRuta;&#10;//import GestionAprendizaje_Modulo.Logica.Ruta;&#10;//import GestionAprendizaje_Modulo.Modelo.RecursoAprendizaje;&#10;//import GestionAprendizaje_Modulo.Repositorio.RecursoRepository;&#10;//import MetodosGlobales.MetodosFrecuentes;&#10;//import MetodosGlobales.SesionManager;&#10;//import Nuevo_Modulo_Leccion.logic.TemaLeccion;&#10;//import Modulo_Usuario.Clases.Usuario;&#10;//import Nuevo_Modulo_Leccion.controllers.LeccionUIController;&#10;//import Nuevo_Modulo_Leccion.logic.Leccion;&#10;//import javafx.fxml.FXML;&#10;//import javafx.fxml.FXMLLoader;&#10;//import javafx.scene.control.Button;&#10;//import javafx.scene.control.Label;&#10;//import javafx.scene.control.Tooltip;&#10;//import javafx.scene.layout.AnchorPane;&#10;//import javafx.scene.layout.FlowPane;&#10;//import javafx.scene.layout.VBox;&#10;//import javafx.stage.Stage;&#10;//&#10;//import java.io.IOException;&#10;//import java.util.List;&#10;//import java.util.Map;&#10;//import java.util.stream.Collectors;&#10;//&#10;///**&#10;// * =================================================================================&#10;// * Controlador de la Vista de Ruta - Versión Final Autosuficiente&#10;// * =================================================================================&#10;// * Este controlador es autosuficiente. Al iniciarse, le pide al&#10;// * AprendizajeManager que construya la estructura de rutas y luego dibuja&#10;// * una ruta por defecto (Java) en la pantalla.&#10;// */&#10;//public class RutaController {&#10;//&#10;//    @FXML private VBox contenidoVBox;&#10;//    @FXML private Label tituloLenguajeLabel;&#10;//    @FXML private AnchorPane rootPane;&#10;//    @FXML private Button btnAtras;&#10;//    @FXML private Button btnRecursosGenerales;&#10;//    private Usuario usuarioActual;&#10;//    private Ruta rutaActual;&#10;//&#10;//    @FXML&#10;//    private void initialize() {&#10;//        System.out.println(&quot;[RutaController] Inicializando...&quot;);&#10;//&#10;//        // 1. INICIAR LA CONSTRUCCIÓN DE DATOS EN EL MANAGER&#10;//        AprendizajeManager.getInstancia().construirDatosDePrueba();&#10;//&#10;//        // 2. OBTENER EL USUARIO ACTUAL DE LA SESIÓN&#10;//        this.usuarioActual = SesionManager.getInstancia().getUsuarioAutenticado();&#10;//        if (usuarioActual == null) {&#10;//            tituloLenguajeLabel.setText(&quot;ERROR: No hay usuario en sesión&quot;);&#10;//            return;&#10;//        }&#10;//&#10;//        // 3. &quot;JALAR&quot; LA RUTA DE JAVA POR DEFECTO&#10;//        this.rutaActual = AprendizajeManager.getInstancia().getRutaPorNombre(&quot;Java&quot;);&#10;//&#10;//        if (this.rutaActual == null) {&#10;//            System.err.println(&quot;[RutaController] No se pudo obtener la ruta por defecto 'Java' del Manager.&quot;);&#10;//            tituloLenguajeLabel.setText(&quot;Contenido no disponible&quot;);&#10;//            return;&#10;//        }&#10;//&#10;//        tituloLenguajeLabel.setText(rutaActual.getNombre());&#10;//&#10;//        // 4. Dibujar la UI con la información obtenida.&#10;//        construirContenedoresVisuales();&#10;//    }&#10;//&#10;//    private void construirContenedoresVisuales() {&#10;//        contenidoVBox.getChildren().clear();&#10;//        contenidoVBox.setSpacing(20);&#10;//        if (rutaActual == null) return;&#10;//&#10;//        Map&lt;TemaLeccion, List&lt;NodoRuta&gt;&gt; nodosPorTema = rutaActual.getNodos().stream()&#10;//                .filter(nodo -&gt; nodo.getLeccion() != null &amp;&amp; !nodo.getLeccion().getListEjercicios().isEmpty())&#10;//                .collect(Collectors.groupingBy(nodo -&gt; nodo.getLeccion().getListEjercicios().get(0).getTema()));&#10;//&#10;//        for (Map.Entry&lt;TemaLeccion, List&lt;NodoRuta&gt;&gt; grupo : nodosPorTema.entrySet()) {&#10;//            String nombreTema = capitalizar(grupo.getKey().name());&#10;//            List&lt;NodoRuta&gt; nodosDelTema = grupo.getValue();&#10;//            VBox contenedorUI = crearContenedorUI(nombreTema, nodosDelTema);&#10;//            contenidoVBox.getChildren().add(contenedorUI);&#10;//        }&#10;//    }&#10;//&#10;//    private VBox crearContenedorUI(String nombreTema, List&lt;NodoRuta&gt; nodos) {&#10;//        VBox vbox = new VBox(10);&#10;//        vbox.setStyle(&quot;-fx-padding: 15; -fx-background-color: #FFFFFF1A; -fx-background-radius: 10;&quot;);&#10;//&#10;//        Label tituloTema = new Label(nombreTema);&#10;//        tituloTema.setStyle(&quot;-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: white;&quot;);&#10;//&#10;//        FlowPane nodosPane = new FlowPane(15, 15);&#10;//        for (NodoRuta nodo : nodos) {&#10;//            Button nodoBoton = new Button(&quot;L&quot; + nodo.getOrden());&#10;//&#10;//            boolean estaCompletado = AprendizajeManager.getInstancia().isNodoCompletadoParaUsuario(usuarioActual, nodo);&#10;//            if (estaCompletado) {&#10;//                nodoBoton.setStyle(&quot;-fx-background-color: #3498DB; /* Estilo completado */&quot;);&#10;//                nodoBoton.setTooltip(new Tooltip(&quot;Lección COMPLETADA&quot;));&#10;//            } else {&#10;//                nodoBoton.setStyle(&quot;-fx-background-color: #50C878; /* Estilo pendiente */&quot;);&#10;//                nodoBoton.setTooltip(new Tooltip(&quot;Lección con &quot; + nodo.getLeccion().getNumEjercicios() + &quot; ejercicios&quot;));&#10;//            }&#10;//            nodoBoton.getStyleClass().add(&quot;nodo-boton&quot;);&#10;//&#10;//            nodoBoton.setUserData(nodo);&#10;//            nodoBoton.setOnAction(e -&gt; {&#10;//                NodoRuta nodoClicado = (NodoRuta) ((Button) e.getSource()).getUserData();&#10;//                Stage stage = (Stage) contenidoVBox.getScene().getWindow();&#10;//                LeccionUIController.mostrarUnaLeccion(nodoClicado.getLeccion(), stage, &quot;/GestionAprendizaje_Modulo/Vistas/Ruta.fxml&quot;);&#10;//                AprendizajeManager.getInstancia().marcarNodoComoCompletado(usuarioActual, nodoClicado);&#10;//                construirContenedoresVisuales();&#10;//            });&#10;//&#10;//            // --- ¡NUEVO BOTÓN DE RECURSOS DENTRO DEL CONTENEDOR! ---&#10;//            Button verRecursosBtn = new Button(&quot; Ver Recursos de &quot; + nombreTema);&#10;//            verRecursosBtn.setStyle(&quot;-fx-background-color: #A6B1E1; -fx-text-fill: #424874; -fx-font-weight: bold; -fx-background-radius: 20; -fx-cursor: hand;&quot;);&#10;//&#10;//            verRecursosBtn.setOnAction(e -&gt; {&#10;//                // El 'nivel' de la Ruta contiene el LENGUAJE (ej. &quot;JAVA&quot;)&#10;//                String lenguajeDeLaRuta = rutaActual.getNivel();&#10;//                // El 'name()' del enum del tema contiene el TEMA (ej. &quot;CONTROL_DE_FLUJO&quot;)&#10;//                String temaDelContenedor = nombreTema;&#10;//&#10;//                // Llamamos al método de búsqueda con los datos correctos.&#10;//                List&lt;RecursoAprendizaje&gt; recursos = RecursoRepository.getInstancia()&#10;//                        .buscarRecursosPorLenguajeYTema(lenguajeDeLaRuta, temaDelContenedor);&#10;//&#10;//                try {&#10;//                    // Cargar el archivo FXML de la vista de recursos&#10;//                    FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/RecursosTema.fxml&quot;));&#10;//                    AnchorPane recursosPane = loader.load();  // Cargar el contenido de la vista de recursos&#10;//&#10;//                    // Cambiar la escena en el Stage actual&#10;//                    Stage stage = (Stage) rootPane.getScene().getWindow();&#10;//                    stage.getScene().setRoot(recursosPane); // Cambiar la escena al nuevo panel&#10;//                } catch (IOException h) {&#10;//                    h.printStackTrace();  // Mostrar error si algo falla al cargar el FXML&#10;//                }&#10;//&#10;//            });&#10;//&#10;//            vbox.getChildren().addAll(tituloTema, nodosPane, verRecursosBtn);&#10;//            return vbox;&#10;//&#10;//        }&#10;//&#10;//        vbox.getChildren().addAll(tituloTema, nodosPane);&#10;//        return vbox;&#10;//    }&#10;//&#10;//    private String capitalizar(String texto) {&#10;//        if (texto == null || texto.isEmpty()) return texto;&#10;//        return texto.substring(0, 1).toUpperCase() + texto.substring(1).toLowerCase();&#10;//    }&#10;//&#10;//    @FXML&#10;//    private void manejarAtras() {&#10;//        MetodosFrecuentes.cambiarVentana((Stage) rootPane.getScene().getWindow(), &quot;/Modulo_Usuario/views/homeUsuario.fxml&quot;, &quot;Perfil de Usuario&quot;);&#10;//&#10;//    }&#10;//&#10;////    @FXML&#10;////    private void abrirRecursos() {&#10;////        try {&#10;////            // Cargar el archivo FXML de la vista de recursos&#10;////            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/RecursosTema.fxml&quot;));&#10;////            AnchorPane recursosPane = loader.load();  // Cargar el contenido de la vista de recursos&#10;////&#10;////            // Cambiar la escena en el Stage actual&#10;////            Stage stage = (Stage) rootPane.getScene().getWindow();&#10;////            stage.getScene().setRoot(recursosPane); // Cambiar la escena al nuevo panel&#10;////        } catch (IOException e) {&#10;////            e.printStackTrace();  // Mostrar error si algo falla al cargar el FXML&#10;////        }&#10;////    }&#10;//}&#10;&#10;&#10;// IGNORA EL CÓDIGO DE ARRIBA&#10;&#10;package GestionAprendizaje_Modulo.Controladores;&#10;&#10;import java.io.IOException;&#10;import java.util.Comparator;&#10;import java.util.LinkedHashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.stream.Collectors;&#10;&#10;import Conexion.MetodosFrecuentes;&#10;import Conexion.SesionManager;&#10;import GestionAprendizaje_Modulo.Logica.AprendizajeManager;&#10;import GestionAprendizaje_Modulo.Logica.NodoRuta;&#10;import GestionAprendizaje_Modulo.Logica.Ruta;&#10;import GestionAprendizaje_Modulo.Logica.UsuarioConfig;&#10;import GestionAprendizaje_Modulo.Modelo.RecursoAprendizaje;&#10;import GestionAprendizaje_Modulo.Repositorio.RecursoRepository;&#10;import Modulo_Usuario.Clases.Usuario;&#10;import Nuevo_Modulo_Leccion.controllers.LeccionUIController;&#10;import Nuevo_Modulo_Leccion.logic.TemaLeccion;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.control.Tooltip;&#10;import javafx.scene.layout.AnchorPane;&#10;import javafx.scene.layout.FlowPane;&#10;import javafx.scene.layout.VBox;&#10;import javafx.stage.Stage;&#10;&#10;/**&#10; * =================================================================================&#10; * Controlador de la Vista de Ruta - Versión Final Corregida&#10; * =================================================================================&#10; */&#10;public class    RutaController {&#10;&#10;    @FXML private VBox contenidoVBox;&#10;    @FXML private Label tituloLenguajeLabel;&#10;    @FXML private AnchorPane rootPane;&#10;&#10;    private Usuario usuarioActual;&#10;    private Ruta rutaActual;&#10;&#10;    @FXML&#10;    private Button btnLibrary;&#10;&#10;    // Variable para guardar el nivel desbloqueado actual del usuario&#10;    private int nivelDesbloqueado = 1; // 1: Básico, 2: Intermedio, 3: Avanzado&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        System.out.println(&quot;[RutaController] Inicializando...&quot;);&#10;        RecursoRepository.getInstancia().cargarRecursosDesdeTXT();&#10;        &#10;        // Línea de depuración para verificar la carga de recursos&#10;        List&lt;RecursoAprendizaje&gt; todosLosRecursos = RecursoRepository.getInstancia().buscarRecursosPorLenguajeYTema(&quot;JAVA&quot;, &quot;TIPOS_Y_OPERADORES&quot;);&#10;        System.out.println(&quot;[DEBUG] Recursos encontrados para JAVA/TIPOS_Y_OPERADORES: &quot; + todosLosRecursos.size());&#10;        &#10;        // 1. INICIAR LA CONSTRUCCIÓN DE DATOS EN EL MANAGER&#10;        AprendizajeManager.getInstancia().construirDatosDePrueba();&#10;&#10;        // 2. OBTENER EL USUARIO ACTUAL DE LA SESIÓN&#10;        this.usuarioActual = SesionManager.getInstancia().getUsuarioAutenticado();&#10;        if (usuarioActual == null) {&#10;            tituloLenguajeLabel.setText(&quot;ERROR: No hay usuario en sesión&quot;);&#10;            return;&#10;        }&#10;&#10;        // 3. &quot;JALAR&quot; LA RUTA SEGÚN EL LENGUAJE SELECCIONADO&#10;        String lenguaje = DiagnosticoController.lenguajeSeleccionado;&#10;        String nivel = DiagnosticoController.nivelSeleccionado;&#10;        &#10;        // NUEVA LÓGICA: Si no hay selección previa, usar la configuración del usuario&#10;        if (lenguaje == null || lenguaje.isEmpty()) {&#10;            ConfiguracionUsuarioService.ConfiguracionUsuario config = &#10;                ConfiguracionUsuarioService.getInstancia().obtenerConfiguracion(usuarioActual.getUsername());&#10;            if (config != null) {&#10;                lenguaje = config.getLenguaje();&#10;                nivel = config.getNivel();&#10;                System.out.println(&quot;[RutaController] Cargando configuración guardada: &quot; + lenguaje + &quot; - &quot; + nivel);&#10;            }&#10;        }&#10;        &#10;        this.rutaActual = AprendizajeManager.getInstancia().getRutaPorNombre(lenguaje);&#10;&#10;        if (this.rutaActual == null) {&#10;            System.err.println(&quot;[RutaController] No se pudo obtener la ruta por defecto 'Java' del Manager.&quot;);&#10;            tituloLenguajeLabel.setText(&quot;Contenido no disponible&quot;);&#10;            return;&#10;        }&#10;        &#10;        // Actualizar el título con el lenguaje y nivel&#10;        if (lenguaje != null &amp;&amp; !lenguaje.isEmpty()) {&#10;            tituloLenguajeLabel.setText(&quot;Ruta de &quot; + lenguaje + &quot; - &quot; + (nivel != null ? nivel : &quot;Nivel&quot;));&#10;        } else {&#10;            tituloLenguajeLabel.setText(rutaActual.getNombre());&#10;        }&#10;        &#10;        // 4. Dibujar la UI con la información obtenida.&#10;        construirContenedoresVisuales();&#10;&#10;        //5. Botón para mostrar los cursos seguidos&#10;        btnLibrary.setOnAction(event -&gt; mostrarCursosSeguidos());&#10;&#10;    }&#10;&#10;    private void construirContenedoresVisuales() {&#10;        contenidoVBox.getChildren().clear();&#10;        contenidoVBox.setSpacing(20);&#10;        if (rutaActual == null) return;&#10;&#10;        // Leer nivel seleccionado del diagnóstico o de la configuración guardada&#10;        String nivel = DiagnosticoController.nivelSeleccionado;&#10;        &#10;        // NUEVA LÓGICA: Si no hay nivel en el diagnóstico, usar la configuración guardada&#10;        if (nivel == null || nivel.isEmpty()) {&#10;            ConfiguracionUsuarioService.ConfiguracionUsuario config = &#10;                ConfiguracionUsuarioService.getInstancia().obtenerConfiguracion(usuarioActual.getUsername());&#10;            if (config != null) {&#10;                nivel = config.getNivel();&#10;            }&#10;        }&#10;&#10;        // Determinar el nivel desbloqueado actual&#10;        nivelDesbloqueado = calcularNivelDesbloqueado();&#10;&#10;        // Por defecto, solo 1 tema&#10;        int maxTemas = 1;&#10;&#10;        // Lógica por diagnóstico&#10;        if (&quot;Intermedio&quot;.equalsIgnoreCase(nivel)) {&#10;            maxTemas = 2;&#10;        } else if (&quot;Avanzado&quot;.equalsIgnoreCase(nivel)) {&#10;            maxTemas = Integer.MAX_VALUE;&#10;        }&#10;&#10;        // Lógica por nivel desbloqueado&#10;        if (nivelDesbloqueado == 2 &amp;&amp; maxTemas &lt; 2) {&#10;            maxTemas = 2;&#10;        } else if (nivelDesbloqueado == 3 &amp;&amp; maxTemas &lt; Integer.MAX_VALUE) {&#10;            maxTemas = Integer.MAX_VALUE;&#10;        }&#10;&#10;        Map&lt;TemaLeccion, List&lt;NodoRuta&gt;&gt; nodosPorTema = rutaActual.getNodos().stream()&#10;                .filter(nodo -&gt; nodo.getLeccion() != null &amp;&amp; !nodo.getLeccion().getListEjercicios().isEmpty())&#10;                .collect(Collectors.groupingBy(&#10;                        nodo -&gt; nodo.getLeccion().getListEjercicios().get(0).getTema(),&#10;                        LinkedHashMap::new,&#10;                        Collectors.toList()&#10;                ));&#10;&#10;        int temaIndex = 0;&#10;        for (Map.Entry&lt;TemaLeccion, List&lt;NodoRuta&gt;&gt; grupo : nodosPorTema.entrySet()) {&#10;            TemaLeccion temaEnum = grupo.getKey();&#10;            List&lt;NodoRuta&gt; nodosDelTema = grupo.getValue();&#10;            nodosDelTema.sort(Comparator.comparingInt(NodoRuta::getOrden));&#10;            boolean desbloqueado = temaIndex &lt; maxTemas;&#10;            VBox contenedorUI = crearContenedorUI(temaEnum, nodosDelTema, desbloqueado);&#10;            contenidoVBox.getChildren().add(contenedorUI);&#10;            temaIndex++;&#10;        }&#10;    }&#10;&#10;&#10;    private VBox crearContenedorUI(TemaLeccion temaEnum, List&lt;NodoRuta&gt; nodos, boolean desbloqueado) {&#10;        VBox vbox = new VBox(10);&#10;        vbox.setStyle(&quot;-fx-padding: 15; -fx-background-color: #FFFFFF1A; -fx-background-radius: 10;&quot;);&#10;&#10;        String nombreTema = capitalizar(temaEnum.name());&#10;        Label tituloTema = new Label(nombreTema);&#10;        tituloTema.setStyle(&quot;-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: white;&quot;);&#10;&#10;        FlowPane nodosPane = new FlowPane(15, 15);&#10;&#10;        for (NodoRuta nodo : nodos) {&#10;            Button nodoBoton = new Button(&quot;L&quot; + nodo.getOrden());&#10;            boolean estaCompletado = AprendizajeManager.getInstancia().isNodoCompletadoParaUsuario(usuarioActual, nodo);&#10;            if (estaCompletado) {&#10;                nodoBoton.setStyle(&quot;-fx-background-color: #3498DB;&quot;);&#10;                nodoBoton.setTooltip(new Tooltip(&quot;Lección COMPLETADA&quot;));&#10;            } else {&#10;                nodoBoton.setStyle(&quot;-fx-background-color: #50C878;&quot;);&#10;                nodoBoton.setTooltip(new Tooltip(&quot;Lección con &quot; + nodo.getLeccion().getNumEjercicios() + &quot; ejercicios&quot;));&#10;            }&#10;            nodoBoton.getStyleClass().add(&quot;nodo-boton&quot;);&#10;            nodoBoton.setUserData(nodo);&#10;            nodoBoton.setDisable(!desbloqueado);&#10;            if (!desbloqueado) {&#10;                nodoBoton.setStyle(&quot;-fx-background-color: #cccccc; -fx-text-fill: #888;&quot;);&#10;                nodoBoton.setTooltip(new Tooltip(&quot;Desbloquea este tema avanzando de nivel&quot;));&#10;            }&#10;            nodoBoton.setOnAction(e -&gt; {&#10;                NodoRuta nodoClicado = (NodoRuta) ((Button) e.getSource()).getUserData();&#10;                Stage stage = (Stage) contenidoVBox.getScene().getWindow();&#10;                LeccionUIController.mostrarUnaLeccion(nodoClicado.getLeccion(), stage, &quot;/GestionAprendizaje_Modulo/Vistas/Ruta.fxml&quot;);&#10;                AprendizajeManager.getInstancia().marcarNodoComoCompletado(usuarioActual, nodoClicado);&#10;                construirContenedoresVisuales();&#10;            });&#10;            nodosPane.getChildren().add(nodoBoton);&#10;        }&#10;&#10;        Button verRecursosBtn = new Button(&quot; Ver Recursos de &quot; + nombreTema);&#10;        verRecursosBtn.setStyle(&quot;-fx-background-color: #A6B1E1; -fx-text-fill: #424874; -fx-font-weight: bold; -fx-background-radius: 20; -fx-cursor: hand;&quot;);&#10;        verRecursosBtn.setDisable(!desbloqueado);&#10;        verRecursosBtn.setOnAction(e -&gt; {&#10;            List&lt;RecursoAprendizaje&gt; recursos = RecursoRepository.getInstancia().buscarRecursosPorLenguajeYTema(&#10;                    rutaActual.getNivel(),&#10;                    temaEnum.name()&#10;            );&#10;            abrirVentanaDeRecursos(nombreTema, recursos);&#10;        });&#10;&#10;        vbox.getChildren().addAll(tituloTema, nodosPane, verRecursosBtn);&#10;        return vbox;&#10;    }&#10;&#10;    /**&#10;     * Cambia la escena actual para mostrar la lista de recursos.&#10;     */&#10;    private void abrirVentanaDeRecursos(String tema, List&lt;RecursoAprendizaje&gt; recursos) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/RecursosTema.fxml&quot;));&#10;            Parent root = loader.load();&#10;&#10;            RecursosTemaController controller = loader.getController();&#10;            controller.setRecursos(tema, recursos);&#10;&#10;            Stage stage = (Stage) rootPane.getScene().getWindow();&#10;            if (stage.getScene() == null) {&#10;                stage.setScene(new Scene(root, 360, 640));&#10;            } else {&#10;                stage.getScene().setRoot(root);&#10;            }&#10;            stage.setTitle(&quot;Recursos para &quot; + tema);&#10;            stage.show();&#10;&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    // Agrega este método en tu clase RutaController&#10;&#10;    private void mostrarCursosSeguidos() {&#10;        // Suponiendo que tienes una clase UsuarioConfig y un método para leer la configuración&#10;        try {&#10;            UsuarioConfig usuario = UsuarioConfig.leerConfig(&quot;src/main/resources/GestionAprendizaje_Modulo/data/configuracion_usuarios.txt&quot;, usuarioActual.getUsername());&#10;            if (usuario != null) {&#10;                String cursos = usuario.getLenguaje() + &quot; - &quot; + usuario.getNivel();&#10;                // Muestra los cursos en una alerta simple&#10;                javafx.scene.control.Alert alert = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.INFORMATION);&#10;                alert.setTitle(&quot;Cursos Seguidos&quot;);&#10;                alert.setHeaderText(&quot;Cursos que sigues:&quot;);&#10;                alert.setContentText(cursos);&#10;                alert.showAndWait();&#10;            }&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;&#10;    // Lógica para calcular el nivel desbloqueado según el progreso del usuario&#10;    private int calcularNivelDesbloqueado() {&#10;        // 1: Básico, 2: Intermedio, 3: Avanzado&#10;        // Si todos los temas del nivel actual están completos, desbloquea el siguiente&#10;        int nivel = 1;&#10;        Map&lt;TemaLeccion, List&lt;NodoRuta&gt;&gt; nodosPorTema = rutaActual.getNodos().stream()&#10;                .filter(nodo -&gt; nodo.getLeccion() != null &amp;&amp; !nodo.getLeccion().getListEjercicios().isEmpty())&#10;                .collect(Collectors.groupingBy(&#10;                        nodo -&gt; nodo.getLeccion().getListEjercicios().get(0).getTema(),&#10;                        LinkedHashMap::new,&#10;                        Collectors.toList()&#10;                ));&#10;        // Básico: solo el primer tema&#10;        if (estanTodosCompletos(nodosPorTema, 0, 1)) {&#10;            nivel = 2; // Intermedio&#10;            // Intermedio: los dos primeros temas&#10;            if (estanTodosCompletos(nodosPorTema, 0, 2)) {&#10;                nivel = 3; // Avanzado&#10;            }&#10;        }&#10;        return nivel;&#10;    }&#10;&#10;    // Verifica si todos los nodos de los temas [start, end) están completos&#10;    private boolean estanTodosCompletos(Map&lt;TemaLeccion, List&lt;NodoRuta&gt;&gt; nodosPorTema, int start, int end) {&#10;        int idx = 0;&#10;        for (List&lt;NodoRuta&gt; nodos : nodosPorTema.values()) {&#10;            if (idx &gt;= start &amp;&amp; idx &lt; end) {&#10;                for (NodoRuta nodo : nodos) {&#10;                    if (!AprendizajeManager.getInstancia().isNodoCompletadoParaUsuario(usuarioActual, nodo)) {&#10;                        return false;&#10;                    }&#10;                }&#10;            }&#10;            idx++;&#10;        }&#10;        return true;&#10;    }&#10;&#10;    private String capitalizar(String texto) {&#10;        if (texto == null || texto.isEmpty()) return texto;&#10;        String conEspacios = texto.replace('_', ' ');&#10;        return conEspacios.substring(0, 1).toUpperCase() + conEspacios.substring(1).toLowerCase();&#10;    }&#10;&#10;    @FXML&#10;    private void manejarAtras() {&#10;        try {&#10;            MetodosFrecuentes.cambiarVentana((Stage) rootPane.getScene().getWindow(), &quot;/Modulo_Usuario/views/homeUsuario.fxml&quot;, &quot;Perfil de Usuario&quot;);&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="// IGNORA EL CÓDIGO DE ARRIBA&#10;&#10;package GestionAprendizaje_Modulo.Controladores;&#10;&#10;import java.io.IOException;&#10;import java.util.Comparator;&#10;import java.util.LinkedHashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.stream.Collectors;&#10;&#10;import Conexion.MetodosFrecuentes;&#10;import Conexion.SesionManager;&#10;import GestionAprendizaje_Modulo.Logica.AprendizajeManager;&#10;import GestionAprendizaje_Modulo.Logica.NodoRuta;&#10;import GestionAprendizaje_Modulo.Logica.Ruta;&#10;import GestionAprendizaje_Modulo.Logica.UsuarioConfig;&#10;import GestionAprendizaje_Modulo.Modelo.RecursoAprendizaje;&#10;import GestionAprendizaje_Modulo.Repositorio.RecursoRepository;&#10;import Modulo_Usuario.Clases.Usuario;&#10;import Nuevo_Modulo_Leccion.controllers.LeccionUIController;&#10;import Nuevo_Modulo_Leccion.logic.TemaLeccion;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.control.Tooltip;&#10;import javafx.scene.layout.AnchorPane;&#10;import javafx.scene.layout.FlowPane;&#10;import javafx.scene.layout.VBox;&#10;import javafx.stage.Stage;&#10;&#10;/**&#10; * =================================================================================&#10; * Controlador de la Vista de Ruta - Versión Final Corregida&#10; * =================================================================================&#10; */&#10;public class    RutaController {&#10;&#10;    @FXML private VBox contenidoVBox;&#10;    @FXML private Label tituloLenguajeLabel;&#10;    @FXML private AnchorPane rootPane;&#10;&#10;    private Usuario usuarioActual;&#10;    private Ruta rutaActual;&#10;&#10;    @FXML&#10;    private Button btnLibrary;&#10;&#10;    @FXML&#10;    private Button btnAdd;&#10;&#10;    // Variable para guardar el nivel desbloqueado actual del usuario&#10;    private int nivelDesbloqueado = 1; // 1: Básico, 2: Intermedio, 3: Avanzado&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        System.out.println(&quot;[RutaController] Inicializando...&quot;);&#10;        RecursoRepository.getInstancia().cargarRecursosDesdeTXT();&#10;        &#10;        // Línea de depuración para verificar la carga de recursos&#10;        List&lt;RecursoAprendizaje&gt; todosLosRecursos = RecursoRepository.getInstancia().buscarRecursosPorLenguajeYTema(&quot;JAVA&quot;, &quot;TIPOS_Y_OPERADORES&quot;);&#10;        System.out.println(&quot;[DEBUG] Recursos encontrados para JAVA/TIPOS_Y_OPERADORES: &quot; + todosLosRecursos.size());&#10;        &#10;        // 1. INICIAR LA CONSTRUCCIÓN DE DATOS EN EL MANAGER&#10;        AprendizajeManager.getInstancia().construirDatosDePrueba();&#10;&#10;        // 2. OBTENER EL USUARIO ACTUAL DE LA SESIÓN&#10;        this.usuarioActual = SesionManager.getInstancia().getUsuarioAutenticado();&#10;        if (usuarioActual == null) {&#10;            tituloLenguajeLabel.setText(&quot;ERROR: No hay usuario en sesión&quot;);&#10;            return;&#10;        }&#10;&#10;        // 3. &quot;JALAR&quot; LA RUTA SEGÚN EL LENGUAJE SELECCIONADO&#10;        String lenguaje = DiagnosticoController.lenguajeSeleccionado;&#10;        String nivel = DiagnosticoController.nivelSeleccionado;&#10;        &#10;        // NUEVA LÓGICA: Si no hay selección previa, usar la configuración del usuario&#10;        if (lenguaje == null || lenguaje.isEmpty()) {&#10;            ConfiguracionUsuarioService.ConfiguracionUsuario config = &#10;                ConfiguracionUsuarioService.getInstancia().obtenerConfiguracion(usuarioActual.getUsername());&#10;            if (config != null) {&#10;                lenguaje = config.getLenguaje();&#10;                nivel = config.getNivel();&#10;                System.out.println(&quot;[RutaController] Cargando configuración guardada: &quot; + lenguaje + &quot; - &quot; + nivel);&#10;            }&#10;        }&#10;        &#10;        this.rutaActual = AprendizajeManager.getInstancia().getRutaPorNombre(lenguaje);&#10;&#10;        if (this.rutaActual == null) {&#10;            System.err.println(&quot;[RutaController] No se pudo obtener la ruta por defecto 'Java' del Manager.&quot;);&#10;            tituloLenguajeLabel.setText(&quot;Contenido no disponible&quot;);&#10;            return;&#10;        }&#10;        &#10;        // Actualizar el título con el lenguaje y nivel&#10;        if (lenguaje != null &amp;&amp; !lenguaje.isEmpty()) {&#10;            tituloLenguajeLabel.setText(&quot;Ruta de &quot; + lenguaje + &quot; - &quot; + (nivel != null ? nivel : &quot;Nivel&quot;));&#10;        } else {&#10;            tituloLenguajeLabel.setText(rutaActual.getNombre());&#10;        }&#10;        &#10;        // 4. Dibujar la UI con la información obtenida.&#10;        construirContenedoresVisuales();&#10;&#10;        //5. Botón para mostrar los cursos seguidos&#10;        btnLibrary.setOnAction(event -&gt; {&#10;            try {&#10;                FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/MisLenguajes.fxml&quot;));&#10;                AnchorPane misLenguajesPane = loader.load();&#10;                Stage stage = (Stage) rootPane.getScene().getWindow();&#10;                stage.setScene(new Scene(misLenguajesPane));&#10;                stage.show();&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;&#10;        // Acción para el botón Add&#10;        btnAdd.setOnAction(event -&gt; {&#10;            try {&#10;                // Cargar el archivo FXML de la vista HomeUsuario&#10;                FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/Cursos.fxml&quot;));&#10;                AnchorPane cursos = loader.load(); // Cargar el contenido del archivo FXML&#10;&#10;                // Obtener el stage actual y cambiar la escena&#10;                Stage stage = (Stage) rootPane.getScene().getWindow();&#10;                stage.setScene(new javafx.scene.Scene(cursos)); // Cambiar la escena por la nueva vista&#10;                stage.show(); // Mostrar la nueva escena&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void construirContenedoresVisuales() {&#10;        contenidoVBox.getChildren().clear();&#10;        contenidoVBox.setSpacing(20);&#10;        if (rutaActual == null) return;&#10;&#10;        // Leer nivel seleccionado del diagnóstico o de la configuración guardada&#10;        String nivel = DiagnosticoController.nivelSeleccionado;&#10;        &#10;        // NUEVA LÓGICA: Si no hay nivel en el diagnóstico, usar la configuración guardada&#10;        if (nivel == null || nivel.isEmpty()) {&#10;            ConfiguracionUsuarioService.ConfiguracionUsuario config = &#10;                ConfiguracionUsuarioService.getInstancia().obtenerConfiguracion(usuarioActual.getUsername());&#10;            if (config != null) {&#10;                nivel = config.getNivel();&#10;            }&#10;        }&#10;&#10;        // Determinar el nivel desbloqueado actual&#10;        nivelDesbloqueado = calcularNivelDesbloqueado();&#10;&#10;        // Por defecto, solo 1 tema&#10;        int maxTemas = 1;&#10;&#10;        // Lógica por diagnóstico&#10;        if (&quot;Intermedio&quot;.equalsIgnoreCase(nivel)) {&#10;            maxTemas = 2;&#10;        } else if (&quot;Avanzado&quot;.equalsIgnoreCase(nivel)) {&#10;            maxTemas = Integer.MAX_VALUE;&#10;        }&#10;&#10;        // Lógica por nivel desbloqueado&#10;        if (nivelDesbloqueado == 2 &amp;&amp; maxTemas &lt; 2) {&#10;            maxTemas = 2;&#10;        } else if (nivelDesbloqueado == 3 &amp;&amp; maxTemas &lt; Integer.MAX_VALUE) {&#10;            maxTemas = Integer.MAX_VALUE;&#10;        }&#10;&#10;        Map&lt;TemaLeccion, List&lt;NodoRuta&gt;&gt; nodosPorTema = rutaActual.getNodos().stream()&#10;                .filter(nodo -&gt; nodo.getLeccion() != null &amp;&amp; !nodo.getLeccion().getListEjercicios().isEmpty())&#10;                .collect(Collectors.groupingBy(&#10;                        nodo -&gt; nodo.getLeccion().getListEjercicios().get(0).getTema(),&#10;                        LinkedHashMap::new,&#10;                        Collectors.toList()&#10;                ));&#10;&#10;        int temaIndex = 0;&#10;        for (Map.Entry&lt;TemaLeccion, List&lt;NodoRuta&gt;&gt; grupo : nodosPorTema.entrySet()) {&#10;            TemaLeccion temaEnum = grupo.getKey();&#10;            List&lt;NodoRuta&gt; nodosDelTema = grupo.getValue();&#10;            nodosDelTema.sort(Comparator.comparingInt(NodoRuta::getOrden));&#10;            boolean desbloqueado = temaIndex &lt; maxTemas;&#10;            VBox contenedorUI = crearContenedorUI(temaEnum, nodosDelTema, desbloqueado);&#10;            contenidoVBox.getChildren().add(contenedorUI);&#10;            temaIndex++;&#10;        }&#10;    }&#10;&#10;&#10;    private VBox crearContenedorUI(TemaLeccion temaEnum, List&lt;NodoRuta&gt; nodos, boolean desbloqueado) {&#10;        VBox vbox = new VBox(10);&#10;        vbox.setStyle(&quot;-fx-padding: 15; -fx-background-color: #FFFFFF1A; -fx-background-radius: 10;&quot;);&#10;&#10;        String nombreTema = capitalizar(temaEnum.name());&#10;        Label tituloTema = new Label(nombreTema);&#10;        tituloTema.setStyle(&quot;-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: white;&quot;);&#10;&#10;        FlowPane nodosPane = new FlowPane(15, 15);&#10;&#10;        for (NodoRuta nodo : nodos) {&#10;            Button nodoBoton = new Button(&quot;L&quot; + nodo.getOrden());&#10;            boolean estaCompletado = AprendizajeManager.getInstancia().isNodoCompletadoParaUsuario(usuarioActual, nodo);&#10;            if (estaCompletado) {&#10;                nodoBoton.setStyle(&quot;-fx-background-color: #3498DB;&quot;);&#10;                nodoBoton.setTooltip(new Tooltip(&quot;Lección COMPLETADA&quot;));&#10;            } else {&#10;                nodoBoton.setStyle(&quot;-fx-background-color: #50C878;&quot;);&#10;                nodoBoton.setTooltip(new Tooltip(&quot;Lección con &quot; + nodo.getLeccion().getNumEjercicios() + &quot; ejercicios&quot;));&#10;            }&#10;            nodoBoton.getStyleClass().add(&quot;nodo-boton&quot;);&#10;            nodoBoton.setUserData(nodo);&#10;            nodoBoton.setDisable(!desbloqueado);&#10;            if (!desbloqueado) {&#10;                nodoBoton.setStyle(&quot;-fx-background-color: #cccccc; -fx-text-fill: #888;&quot;);&#10;                nodoBoton.setTooltip(new Tooltip(&quot;Desbloquea este tema avanzando de nivel&quot;));&#10;            }&#10;            nodoBoton.setOnAction(e -&gt; {&#10;                NodoRuta nodoClicado = (NodoRuta) ((Button) e.getSource()).getUserData();&#10;                Stage stage = (Stage) contenidoVBox.getScene().getWindow();&#10;                LeccionUIController.mostrarUnaLeccion(nodoClicado.getLeccion(), stage, &quot;/GestionAprendizaje_Modulo/Vistas/Ruta.fxml&quot;);&#10;                AprendizajeManager.getInstancia().marcarNodoComoCompletado(usuarioActual, nodoClicado);&#10;                construirContenedoresVisuales();&#10;            });&#10;            nodosPane.getChildren().add(nodoBoton);&#10;        }&#10;&#10;        Button verRecursosBtn = new Button(&quot; Ver Recursos de &quot; + nombreTema);&#10;        verRecursosBtn.setStyle(&quot;-fx-background-color: #A6B1E1; -fx-text-fill: #424874; -fx-font-weight: bold; -fx-background-radius: 20; -fx-cursor: hand;&quot;);&#10;        verRecursosBtn.setDisable(!desbloqueado);&#10;        verRecursosBtn.setOnAction(e -&gt; {&#10;            List&lt;RecursoAprendizaje&gt; recursos = RecursoRepository.getInstancia().buscarRecursosPorLenguajeYTema(&#10;                    rutaActual.getNivel(),&#10;                    temaEnum.name()&#10;            );&#10;            abrirVentanaDeRecursos(nombreTema, recursos);&#10;        });&#10;&#10;        vbox.getChildren().addAll(tituloTema, nodosPane, verRecursosBtn);&#10;        return vbox;&#10;    }&#10;&#10;    /**&#10;     * Cambia la escena actual para mostrar la lista de recursos.&#10;     */&#10;    private void abrirVentanaDeRecursos(String tema, List&lt;RecursoAprendizaje&gt; recursos) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/RecursosTema.fxml&quot;));&#10;            Parent root = loader.load();&#10;&#10;            RecursosTemaController controller = loader.getController();&#10;            controller.setRecursos(tema, recursos);&#10;&#10;            Stage stage = (Stage) rootPane.getScene().getWindow();&#10;            if (stage.getScene() == null) {&#10;                stage.setScene(new Scene(root, 360, 640));&#10;            } else {&#10;                stage.getScene().setRoot(root);&#10;            }&#10;            stage.setTitle(&quot;Recursos para &quot; + tema);&#10;            stage.show();&#10;&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    // Agrega este método en tu clase RutaController&#10;&#10;    private void mostrarCursosSeguidos() {&#10;        // Suponiendo que tienes una clase UsuarioConfig y un método para leer la configuración&#10;        try {&#10;            UsuarioConfig usuario = UsuarioConfig.leerConfig(&quot;src/main/resources/GestionAprendizaje_Modulo/data/configuracion_usuarios.txt&quot;, usuarioActual.getUsername());&#10;            if (usuario != null) {&#10;                String cursos = usuario.getLenguaje() + &quot; - &quot; + usuario.getNivel();&#10;                // Muestra los cursos en una alerta simple&#10;                javafx.scene.control.Alert alert = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.INFORMATION);&#10;                alert.setTitle(&quot;Cursos Seguidos&quot;);&#10;                alert.setHeaderText(&quot;Cursos que sigues:&quot;);&#10;                alert.setContentText(cursos);&#10;                alert.showAndWait();&#10;            }&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;&#10;    // Lógica para calcular el nivel desbloqueado según el progreso del usuario&#10;    private int calcularNivelDesbloqueado() {&#10;        // 1: Básico, 2: Intermedio, 3: Avanzado&#10;        // Si todos los temas del nivel actual están completos, desbloquea el siguiente&#10;        int nivel = 1;&#10;        Map&lt;TemaLeccion, List&lt;NodoRuta&gt;&gt; nodosPorTema = rutaActual.getNodos().stream()&#10;                .filter(nodo -&gt; nodo.getLeccion() != null &amp;&amp; !nodo.getLeccion().getListEjercicios().isEmpty())&#10;                .collect(Collectors.groupingBy(&#10;                        nodo -&gt; nodo.getLeccion().getListEjercicios().get(0).getTema(),&#10;                        LinkedHashMap::new,&#10;                        Collectors.toList()&#10;                ));&#10;        // Básico: solo el primer tema&#10;        if (estanTodosCompletos(nodosPorTema, 0, 1)) {&#10;            nivel = 2; // Intermedio&#10;            // Intermedio: los dos primeros temas&#10;            if (estanTodosCompletos(nodosPorTema, 0, 2)) {&#10;                nivel = 3; // Avanzado&#10;            }&#10;        }&#10;        return nivel;&#10;    }&#10;&#10;    // Verifica si todos los nodos de los temas [start, end) están completos&#10;    private boolean estanTodosCompletos(Map&lt;TemaLeccion, List&lt;NodoRuta&gt;&gt; nodosPorTema, int start, int end) {&#10;        int idx = 0;&#10;        for (List&lt;NodoRuta&gt; nodos : nodosPorTema.values()) {&#10;            if (idx &gt;= start &amp;&amp; idx &lt; end) {&#10;                for (NodoRuta nodo : nodos) {&#10;                    if (!AprendizajeManager.getInstancia().isNodoCompletadoParaUsuario(usuarioActual, nodo)) {&#10;                        return false;&#10;                    }&#10;                }&#10;            }&#10;            idx++;&#10;        }&#10;        return true;&#10;    }&#10;&#10;    private String capitalizar(String texto) {&#10;        if (texto == null || texto.isEmpty()) return texto;&#10;        String conEspacios = texto.replace('_', ' ');&#10;        return conEspacios.substring(0, 1).toUpperCase() + conEspacios.substring(1).toLowerCase();&#10;    }&#10;&#10;    @FXML&#10;    private void manejarAtras() {&#10;        try {&#10;            MetodosFrecuentes.cambiarVentana((Stage) rootPane.getScene().getWindow(), &quot;/Modulo_Usuario/views/homeUsuario.fxml&quot;, &quot;Perfil de Usuario&quot;);&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/GestionAprendizaje_Modulo/Controladores/SeleccionMultipleLenguajesController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/GestionAprendizaje_Modulo/Controladores/SeleccionMultipleLenguajesController.java" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package GestionAprendizaje_Modulo.Controladores;&#10;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;import Conexion.SesionManager;&#10;import Modulo_Usuario.Clases.Usuario;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.Alert;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.CheckBox;&#10;import javafx.scene.control.ComboBox;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.layout.AnchorPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.scene.layout.VBox;&#10;import javafx.stage.Stage;&#10;&#10;public class SeleccionMultipleLenguajesController {&#10;&#10;    @FXML private VBox lenguajesContainer;&#10;    @FXML private Button btnContinuar;&#10;    @FXML private Button btnVolver;&#10;&#10;    private Map&lt;String, CheckBox&gt; checkBoxLenguajes = new HashMap&lt;&gt;();&#10;    private Map&lt;String, ComboBox&lt;String&gt;&gt; comboBoxNiveles = new HashMap&lt;&gt;();&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        crearOpcionesLenguajes();&#10;        configurarBotones();&#10;        deshabilitarLenguajesExistentes(); // Nuevo método para deshabilitar lenguajes ya existentes&#10;    }&#10;&#10;    private void crearOpcionesLenguajes() {&#10;        String[] lenguajes = {&quot;Java&quot;, &quot;Python&quot;, &quot;PHP&quot;, &quot;C&quot;};&#10;        String[] niveles = {&quot;Básico&quot;, &quot;Intermedio&quot;, &quot;Avanzado&quot;};&#10;&#10;        for (String lenguaje : lenguajes) {&#10;            // Crear container para cada lenguaje&#10;            VBox lenguajeContainer = new VBox(10);&#10;            lenguajeContainer.setStyle(&quot;-fx-padding: 15; -fx-background-color: #FFFFFF1A; -fx-background-radius: 10;&quot;);&#10;&#10;            // CheckBox para seleccionar el lenguaje&#10;            CheckBox checkBox = new CheckBox(lenguaje);&#10;            checkBox.setStyle(&quot;-fx-text-fill: white; -fx-font-size: 16px; -fx-font-weight: bold;&quot;);&#10;            checkBoxLenguajes.put(lenguaje, checkBox);&#10;&#10;            // ComboBox para seleccionar el nivel&#10;            ComboBox&lt;String&gt; comboBox = new ComboBox&lt;&gt;();&#10;            comboBox.getItems().addAll(niveles);&#10;            comboBox.setValue(&quot;Básico&quot;); // Valor por defecto&#10;            comboBox.setStyle(&quot;-fx-font-size: 14px;&quot;);&#10;            comboBox.setPrefWidth(150);&#10;            comboBox.setDisable(true); // Inicialmente deshabilitado&#10;            comboBoxNiveles.put(lenguaje, comboBox);&#10;&#10;            // Label para el nivel&#10;            Label labelNivel = new Label(&quot;Nivel:&quot;);&#10;            labelNivel.setStyle(&quot;-fx-text-fill: #A6B1E1; -fx-font-size: 14px;&quot;);&#10;&#10;            // Container horizontal para nivel&#10;            HBox nivelContainer = new HBox(10);&#10;            nivelContainer.getChildren().addAll(labelNivel, comboBox);&#10;&#10;            // Agregar todo al container del lenguaje&#10;            lenguajeContainer.getChildren().addAll(checkBox, nivelContainer);&#10;&#10;            // Configurar evento del checkbox&#10;            checkBox.setOnAction(event -&gt; {&#10;                comboBox.setDisable(!checkBox.isSelected());&#10;                if (!checkBox.isSelected()) {&#10;                    comboBox.setValue(&quot;Básico&quot;); // Reset al valor por defecto&#10;                }&#10;            });&#10;&#10;            lenguajesContainer.getChildren().add(lenguajeContainer);&#10;        }&#10;    }&#10;&#10;    // Nuevo método para deshabilitar lenguajes que el usuario ya tiene&#10;    private void deshabilitarLenguajesExistentes() {&#10;        try {&#10;            Usuario usuarioActual = SesionManager.getInstancia().getUsuarioAutenticado();&#10;            if (usuarioActual != null) {&#10;                ConfiguracionUsuarioService.ConfiguracionUsuario config = &#10;                    ConfiguracionUsuarioService.getInstancia().obtenerConfiguracion(usuarioActual.getUsername());&#10;                &#10;                if (config != null &amp;&amp; !config.getLenguajes().isEmpty()) {&#10;                    List&lt;String&gt; lenguajesExistentes = config.getLenguajes();&#10;                    &#10;                    // Deshabilitar checkboxes de lenguajes ya existentes&#10;                    for (String lenguajeExistente : lenguajesExistentes) {&#10;                        CheckBox checkBox = checkBoxLenguajes.get(lenguajeExistente);&#10;                        ComboBox&lt;String&gt; comboBox = comboBoxNiveles.get(lenguajeExistente);&#10;                        &#10;                        if (checkBox != null) {&#10;                            checkBox.setSelected(false);&#10;                            checkBox.setDisable(true);&#10;                            checkBox.setText(lenguajeExistente + &quot; (Ya configurado)&quot;);&#10;                            checkBox.setStyle(&quot;-fx-text-fill: #888888; -fx-font-size: 16px; -fx-opacity: 0.6;&quot;);&#10;                            &#10;                            if (comboBox != null) {&#10;                                comboBox.setDisable(true);&#10;                                comboBox.setValue(config.getNivelParaLenguaje(lenguajeExistente));&#10;                                comboBox.setStyle(&quot;-fx-opacity: 0.6;&quot;);&#10;                            }&#10;                        }&#10;                    }&#10;                    &#10;                    System.out.println(&quot;[SeleccionMultiple] Lenguajes ya configurados: &quot; + lenguajesExistentes);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al verificar lenguajes existentes: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void configurarBotones() {&#10;        btnVolver.setOnAction(event -&gt; {&#10;            try {&#10;                FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/Cursos.fxml&quot;));&#10;                AnchorPane cursosPane = loader.load();&#10;                Stage stage = (Stage) btnVolver.getScene().getWindow();&#10;                stage.setScene(new Scene(cursosPane));&#10;                stage.show();&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;&#10;        btnContinuar.setOnAction(event -&gt; {&#10;            List&lt;String&gt; lenguajesSeleccionados = new ArrayList&lt;&gt;();&#10;            List&lt;String&gt; nivelesSeleccionados = new ArrayList&lt;&gt;();&#10;&#10;            // Recopilar lenguajes y niveles seleccionados&#10;            for (Map.Entry&lt;String, CheckBox&gt; entry : checkBoxLenguajes.entrySet()) {&#10;                String lenguaje = entry.getKey();&#10;                CheckBox checkBox = entry.getValue();&#10;&#10;                if (checkBox.isSelected()) {&#10;                    lenguajesSeleccionados.add(lenguaje);&#10;                    String nivel = comboBoxNiveles.get(lenguaje).getValue();&#10;                    nivelesSeleccionados.add(nivel);&#10;                }&#10;            }&#10;&#10;            // Validar que se haya seleccionado al menos un lenguaje&#10;            if (lenguajesSeleccionados.isEmpty()) {&#10;                Alert alerta = new Alert(Alert.AlertType.WARNING);&#10;                alerta.setTitle(&quot;Sin selección&quot;);&#10;                alerta.setHeaderText(null);&#10;                alerta.setContentText(&quot;Por favor, selecciona al menos un lenguaje antes de continuar.&quot;);&#10;                alerta.showAndWait();&#10;                return;&#10;            }&#10;&#10;            // Guardar la configuración múltiple AGREGANDO a los existentes&#10;            try {&#10;                Usuario usuarioActual = SesionManager.getInstancia().getUsuarioAutenticado();&#10;                if (usuarioActual != null) {&#10;                    // Usar el nuevo método que AGREGA lenguajes en lugar de reemplazarlos&#10;                    ConfiguracionUsuarioService.getInstancia().agregarLenguajesAlUsuario(&#10;                            usuarioActual.getUsername(),&#10;                            lenguajesSeleccionados,&#10;                            nivelesSeleccionados&#10;                    );&#10;                    System.out.println(&quot;Lenguajes agregados para: &quot; + usuarioActual.getUsername());&#10;                    System.out.println(&quot;Nuevos lenguajes: &quot; + lenguajesSeleccionados);&#10;                    System.out.println(&quot;Nuevos niveles: &quot; + nivelesSeleccionados);&#10;&#10;                    // Establecer el primer lenguaje como el actual para el DiagnosticoController&#10;                    DiagnosticoController.lenguajeSeleccionado = lenguajesSeleccionados.get(0);&#10;                    DiagnosticoController.nivelSeleccionado = nivelesSeleccionados.get(0);&#10;                }&#10;            } catch (Exception e) {&#10;                System.err.println(&quot;Error al agregar lenguajes: &quot; + e.getMessage());&#10;                e.printStackTrace();&#10;            }&#10;&#10;            // Ir directamente a la vista de Mis Lenguajes para mostrar todos los lenguajes&#10;            try {&#10;                FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/GestionAprendizaje_Modulo/Vistas/MisLenguajes.fxml&quot;));&#10;                AnchorPane misLenguajesPane = loader.load();&#10;                Stage stage = (Stage) btnContinuar.getScene().getWindow();&#10;                stage.setScene(new Scene(misLenguajesPane));&#10;                stage.show();&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/GestionAprendizaje_Modulo/Vistas/Cursos.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/GestionAprendizaje_Modulo/Vistas/Cursos.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.control.Label?&gt;&#10;&lt;?import javafx.scene.layout.AnchorPane?&gt;&#10;&lt;?import javafx.scene.layout.VBox?&gt;&#10;&#10;&lt;AnchorPane prefHeight=&quot;640.0&quot; prefWidth=&quot;360.0&quot; style=&quot;-fx-background-color: #424874;&quot; xmlns=&quot;http://javafx.com/javafx/24.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;GestionAprendizaje_Modulo.Controladores.CursosController&quot;&gt;&#10;    &lt;children&gt;&#10;        &lt;!-- Título de la sección --&gt;&#10;        &lt;Label fx:id=&quot;tituloLenguajeLabel&quot; layoutX=&quot;46.0&quot; layoutY=&quot;103.0&quot; style=&quot;-fx-text-fill: white; -fx-font-size: 22px; -fx-font-weight: bold; -fx-font-family: 'Segoe UI', Arial, sans-serif;&quot; text=&quot;Curso que desea aprender&quot; /&gt;&#10;&#10;        &lt;!-- Contenedor de botones --&gt;&#10;        &lt;VBox alignment=&quot;CENTER&quot; layoutX=&quot;70.0&quot; layoutY=&quot;192.0&quot; prefHeight=&quot;331.0&quot; prefWidth=&quot;220.0&quot; spacing=&quot;25.0&quot;&gt;&#10;            &lt;children&gt;&#10;                &lt;!-- Botones con estilo moderno y redondeado --&gt;&#10;                &lt;Button fx:id=&quot;btnJava&quot; mnemonicParsing=&quot;false&quot; prefHeight=&quot;40.0&quot; prefWidth=&quot;180.0&quot; style=&quot;-fx-background-color: #6C63FF; -fx-text-fill: white; -fx-font-size: 16px; -fx-font-weight: bold; -fx-background-radius: 25px; -fx-cursor: hand; -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0, 0, 5);&quot; text=&quot;JAVA&quot; /&gt;&#10;                &lt;Button fx:id=&quot;btnPython&quot; mnemonicParsing=&quot;false&quot; prefHeight=&quot;40.0&quot; prefWidth=&quot;180.0&quot; style=&quot;-fx-background-color: #3B97D3; -fx-text-fill: white; -fx-font-size: 16px; -fx-font-weight: bold; -fx-background-radius: 25px; -fx-cursor: hand; -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0, 0, 5);&quot; text=&quot;PYTHON&quot; /&gt;&#10;                &lt;Button fx:id=&quot;btnPhp&quot; mnemonicParsing=&quot;false&quot; prefHeight=&quot;40.0&quot; prefWidth=&quot;180.0&quot; style=&quot;-fx-background-color: #FF4081; -fx-text-fill: white; -fx-font-size: 16px; -fx-font-weight: bold; -fx-background-radius: 25px; -fx-cursor: hand; -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0, 0, 5);&quot; text=&quot;PHP&quot; /&gt;&#10;                &lt;Button fx:id=&quot;btnCplusplus&quot; mnemonicParsing=&quot;false&quot; prefHeight=&quot;40.0&quot; prefWidth=&quot;180.0&quot; style=&quot;-fx-background-color: #FF7043; -fx-text-fill: white; -fx-font-size: 16px; -fx-font-weight: bold; -fx-background-radius: 25px; -fx-cursor: hand; -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0, 0, 5);&quot; text=&quot;C++&quot; /&gt;&#10;            &lt;/children&gt;&#10;        &lt;/VBox&gt;&#10;&#10;        &lt;!-- Botón Volver --&gt;&#10;        &lt;Button fx:id=&quot;btnVolver&quot; layoutY=&quot;7.0&quot; mnemonicParsing=&quot;false&quot; prefHeight=&quot;47.0&quot; prefWidth=&quot;70.0&quot; style=&quot;-fx-background-color: transparent; -fx-text-fill: white; -fx-font-size: 20px; -fx-background-radius: 25px; -fx-cursor: hand; -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.5), 5, 0, 0, 5); -fx-border-width: 2px;&quot; text=&quot;⬅️&quot; textAlignment=&quot;CENTER&quot;/&gt;&#10;    &lt;/children&gt;&#10;&lt;/AnchorPane&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&#13;&#10;&lt;?import javafx.scene.control.Button?&gt;&#13;&#10;&lt;?import javafx.scene.control.Label?&gt;&#13;&#10;&lt;?import javafx.scene.layout.AnchorPane?&gt;&#13;&#10;&lt;?import javafx.scene.layout.VBox?&gt;&#13;&#10;&#13;&#10;&lt;AnchorPane prefHeight=&quot;640.0&quot; prefWidth=&quot;360.0&quot; style=&quot;-fx-background-color: #424874;&quot; xmlns=&quot;http://javafx.com/javafx/24.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;GestionAprendizaje_Modulo.Controladores.CursosController&quot;&gt;&#13;&#10;    &lt;children&gt;&#13;&#10;        &lt;!-- Título de la sección --&gt;&#13;&#10;        &lt;Label fx:id=&quot;tituloLenguajeLabel&quot; layoutX=&quot;46.0&quot; layoutY=&quot;103.0&quot; style=&quot;-fx-text-fill: white; -fx-font-size: 22px; -fx-font-weight: bold; -fx-font-family: 'Segoe UI', Arial, sans-serif;&quot; text=&quot;Curso que desea aprender&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- Contenedor de botones --&gt;&#13;&#10;        &lt;VBox alignment=&quot;CENTER&quot; layoutX=&quot;70.0&quot; layoutY=&quot;192.0&quot; prefHeight=&quot;331.0&quot; prefWidth=&quot;220.0&quot; spacing=&quot;25.0&quot;&gt;&#13;&#10;            &lt;children&gt;&#13;&#10;                &lt;!-- Botones con estilo moderno y redondeado --&gt;&#13;&#10;                &lt;Button fx:id=&quot;btnJava&quot; mnemonicParsing=&quot;false&quot; prefHeight=&quot;40.0&quot; prefWidth=&quot;180.0&quot; style=&quot;-fx-background-color: #6C63FF; -fx-text-fill: white; -fx-font-size: 16px; -fx-font-weight: bold; -fx-background-radius: 25px; -fx-cursor: hand; -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0, 0, 5);&quot; text=&quot;JAVA&quot; /&gt;&#13;&#10;                &lt;Button fx:id=&quot;btnPython&quot; mnemonicParsing=&quot;false&quot; prefHeight=&quot;40.0&quot; prefWidth=&quot;180.0&quot; style=&quot;-fx-background-color: #3B97D3; -fx-text-fill: white; -fx-font-size: 16px; -fx-font-weight: bold; -fx-background-radius: 25px; -fx-cursor: hand; -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0, 0, 5);&quot; text=&quot;PYTHON&quot; /&gt;&#13;&#10;                &lt;Button fx:id=&quot;btnPhp&quot; mnemonicParsing=&quot;false&quot; prefHeight=&quot;40.0&quot; prefWidth=&quot;180.0&quot; style=&quot;-fx-background-color: #FF4081; -fx-text-fill: white; -fx-font-size: 16px; -fx-font-weight: bold; -fx-background-radius: 25px; -fx-cursor: hand; -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0, 0, 5);&quot; text=&quot;PHP&quot; /&gt;&#13;&#10;                &lt;Button fx:id=&quot;btnCplusplus&quot; mnemonicParsing=&quot;false&quot; prefHeight=&quot;40.0&quot; prefWidth=&quot;180.0&quot; style=&quot;-fx-background-color: #FF7043; -fx-text-fill: white; -fx-font-size: 16px; -fx-font-weight: bold; -fx-background-radius: 25px; -fx-cursor: hand; -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0, 0, 5);&quot; text=&quot;C++&quot; /&gt;&#13;&#10;                &#13;&#10;                &lt;!-- Separador visual --&gt;&#13;&#10;                &lt;Label style=&quot;-fx-text-fill: #A6B1E1; -fx-font-size: 12px;&quot; text=&quot;- o -&quot; /&gt;&#13;&#10;                &#13;&#10;                &lt;!-- Botón para selección múltiple --&gt;&#13;&#10;                &lt;Button fx:id=&quot;btnSeleccionMultiple&quot; mnemonicParsing=&quot;false&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;200.0&quot; style=&quot;-fx-background-color: #28A745; -fx-text-fill: white; -fx-font-size: 12px; -fx-font-weight: bold; -fx-background-radius: 20px; -fx-cursor: hand; -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 8, 0, 0, 4);&quot; text=&quot; Múltiples Lenguajes&quot; /&gt;&#13;&#10;            &lt;/children&gt;&#13;&#10;        &lt;/VBox&gt;&#13;&#10;&#13;&#10;        &lt;!-- Botón Volver --&gt;&#13;&#10;        &lt;Button fx:id=&quot;btnVolver&quot; layoutY=&quot;7.0&quot; mnemonicParsing=&quot;false&quot; prefHeight=&quot;47.0&quot; prefWidth=&quot;70.0&quot; style=&quot;-fx-background-color: transparent; -fx-text-fill: white; -fx-font-size: 20px; -fx-background-radius: 25px; -fx-cursor: hand; -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.5), 5, 0, 0, 5); -fx-border-width: 2px;&quot; text=&quot;⬅️&quot; textAlignment=&quot;CENTER&quot;/&gt;&#13;&#10;    &lt;/children&gt;&#13;&#10;&lt;/AnchorPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/GestionAprendizaje_Modulo/Vistas/MisLenguajes.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/GestionAprendizaje_Modulo/Vistas/MisLenguajes.fxml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.control.Label?&gt;&#10;&lt;?import javafx.scene.control.ScrollPane?&gt;&#10;&lt;?import javafx.scene.layout.AnchorPane?&gt;&#10;&lt;?import javafx.scene.layout.HBox?&gt;&#10;&lt;?import javafx.scene.layout.VBox?&gt;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&#10;&lt;AnchorPane fx:id=&quot;rootPane&quot; prefHeight=&quot;640.0&quot; prefWidth=&quot;360.0&quot; style=&quot;-fx-background-color: #424874;&quot; xmlns=&quot;http://javafx.com/javafx/24.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;GestionAprendizaje_Modulo.Controladores.MisLenguajesController&quot;&gt;&#10;&#10;    &lt;!-- Barra Superior --&gt;&#10;    &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; spacing=&quot;10&quot; style=&quot;-fx-background-color: #A6B1E1; -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.15), 6, 0.3, 0, 3);&quot; AnchorPane.leftAnchor=&quot;0.0&quot; AnchorPane.rightAnchor=&quot;0.0&quot; AnchorPane.topAnchor=&quot;0.0&quot;&gt;&#10;        &lt;padding&gt;&#10;            &lt;Insets left=&quot;15.0&quot; right=&quot;15.0&quot; /&gt;&#10;        &lt;/padding&gt;&#10;        &lt;Button fx:id=&quot;btnAtras&quot; style=&quot;-fx-background-color: transparent; -fx-text-fill: #424874; -fx-font-size: 22px; -fx-font-weight: bold; -fx-cursor: hand;&quot; text=&quot;←&quot; /&gt;&#10;        &lt;Label style=&quot;-fx-text-fill: #424874; -fx-font-size: 22px; -fx-font-weight: bold; -fx-font-family: 'Segoe UI', Arial, sans-serif;&quot; text=&quot;Mis Lenguajes&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;    &lt;!-- Contenedor Principal --&gt;&#10;    &lt;ScrollPane fitToWidth=&quot;true&quot; hbarPolicy=&quot;NEVER&quot; style=&quot;-fx-background-color: transparent; -fx-background: transparent;&quot; AnchorPane.bottomAnchor=&quot;60.0&quot; AnchorPane.leftAnchor=&quot;10.0&quot; AnchorPane.rightAnchor=&quot;10.0&quot; AnchorPane.topAnchor=&quot;70.0&quot;&gt;&#10;        &lt;content&gt;&#10;            &lt;VBox fx:id=&quot;lenguajesContainer&quot; spacing=&quot;15.0&quot; style=&quot;-fx-padding: 10;&quot; /&gt;&#10;        &lt;/content&gt;&#10;    &lt;/ScrollPane&gt;&#10;&#10;    &lt;!-- Barra de Navegación Inferior --&gt;&#10;    &lt;HBox alignment=&quot;CENTER&quot; prefHeight=&quot;60.0&quot; spacing=&quot;50.0&quot; style=&quot;-fx-background-color: #A6B1E1;&quot; AnchorPane.bottomAnchor=&quot;0.0&quot; AnchorPane.leftAnchor=&quot;0.0&quot; AnchorPane.rightAnchor=&quot;0.0&quot;&gt;&#10;        &lt;Button fx:id=&quot;btnHome&quot; style=&quot;-fx-background-color: transparent; -fx-text-fill: #424874; -fx-font-size: 24px;&quot; text=&quot;&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnAdd&quot; style=&quot;-fx-background-color: transparent; -fx-text-fill: #424874; -fx-font-size: 24px;&quot; text=&quot;➕&quot; /&gt;&#10;        &lt;Button fx:id=&quot;btnLibrary&quot; style=&quot;-fx-background-color: transparent; -fx-text-fill: #424874; -fx-font-size: 24px;&quot; text=&quot;&quot; /&gt;&#10;    &lt;/HBox&gt;&#10;&#10;&lt;/AnchorPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/GestionAprendizaje_Modulo/Vistas/SeleccionMultipleLenguajes.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/GestionAprendizaje_Modulo/Vistas/SeleccionMultipleLenguajes.fxml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.control.CheckBox?&gt;&#10;&lt;?import javafx.scene.control.ComboBox?&gt;&#10;&lt;?import javafx.scene.control.Label?&gt;&#10;&lt;?import javafx.scene.control.ScrollPane?&gt;&#10;&lt;?import javafx.scene.layout.AnchorPane?&gt;&#10;&lt;?import javafx.scene.layout.VBox?&gt;&#10;&#10;&lt;AnchorPane prefHeight=&quot;640.0&quot; prefWidth=&quot;360.0&quot; style=&quot;-fx-background-color: #424874;&quot; xmlns=&quot;http://javafx.com/javafx/24.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;GestionAprendizaje_Modulo.Controladores.SeleccionMultipleLenguajesController&quot;&gt;&#10;    &lt;children&gt;&#10;        &lt;!-- Título de la sección --&gt;&#10;        &lt;Label layoutX=&quot;46.0&quot; layoutY=&quot;30.0&quot; style=&quot;-fx-text-fill: white; -fx-font-size: 20px; -fx-font-weight: bold; -fx-font-family: 'Segoe UI', Arial, sans-serif;&quot; text=&quot;Selecciona tus Lenguajes&quot; /&gt;&#10;        &#10;        &lt;Label layoutX=&quot;46.0&quot; layoutY=&quot;60.0&quot; style=&quot;-fx-text-fill: #A6B1E1; -fx-font-size: 14px; -fx-font-family: 'Segoe UI', Arial, sans-serif;&quot; text=&quot;Puedes elegir múltiples lenguajes&quot; /&gt;&#10;&#10;        &lt;!-- ScrollPane para la lista de lenguajes --&gt;&#10;        &lt;ScrollPane layoutX=&quot;30.0&quot; layoutY=&quot;100.0&quot; prefHeight=&quot;450.0&quot; prefWidth=&quot;300.0&quot; style=&quot;-fx-background-color: transparent; -fx-background: transparent;&quot;&gt;&#10;            &lt;content&gt;&#10;                &lt;VBox fx:id=&quot;lenguajesContainer&quot; spacing=&quot;20.0&quot; style=&quot;-fx-padding: 20;&quot;&gt;&#10;                    &lt;!-- Los checkboxes se agregan dinámicamente aquí --&gt;&#10;                &lt;/VBox&gt;&#10;            &lt;/content&gt;&#10;        &lt;/ScrollPane&gt;&#10;&#10;        &lt;!-- Botones de acción --&gt;&#10;        &lt;Button fx:id=&quot;btnContinuar&quot; layoutX=&quot;200.0&quot; layoutY=&quot;580.0&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;100.0&quot; &#10;                style=&quot;-fx-background-color: #5A9BD5; -fx-text-fill: white; -fx-font-size: 15px; -fx-font-weight: bold; -fx-background-radius: 18px; -fx-cursor: hand; -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 4,0,0,3);&quot; &#10;                text=&quot;Continuar&quot; /&gt;&#10;        &#10;        &lt;Button fx:id=&quot;btnVolver&quot; layoutX=&quot;60.0&quot; layoutY=&quot;580.0&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;100.0&quot; &#10;                style=&quot;-fx-background-color: #6C757D; -fx-text-fill: white; -fx-font-size: 15px; -fx-font-weight: bold; -fx-background-radius: 18px; -fx-cursor: hand; -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 4,0,0,3);&quot; &#10;                text=&quot;Volver&quot; /&gt;&#10;    &lt;/children&gt;&#10;&lt;/AnchorPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/GestionAprendizaje_Modulo/data/progreso_usuarios.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/GestionAprendizaje_Modulo/data/progreso_usuarios.txt" />
              <option name="originalContent" value="pruebita;ruta-python-nodo-1&#10;Fernando;ruta-c-nodo-1,ruta-c-nodo-4,ruta-c-nodo-5,ruta-c-nodo-2,ruta-c-nodo-3,ruta-c-nodo-6&#10;&#10;" />
              <option name="updatedContent" value="# Archivo de progreso de usuarios&#10;# Formato: username;nodos_completados&#10;# nodos_completados: lista de nodos completados separados por comas (ruta-java-nodo-1,ruta-java-nodo-2)&#10;Fernando;ruta-c-nodo-1,ruta-c-nodo-4,ruta-c-nodo-5,ruta-c-nodo-2,ruta-c-nodo-3,ruta-c-nodo-6&#10;DOE;ruta-java-nodo-1,ruta-python-nodo-1,ruta-php-nodo-1&#10;JON;ruta-java-nodo-1,ruta-java-nodo-2&#10;prueba;ruta-java-nodo-1,ruta-python-nodo-1,ruta-python-nodo-2" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>